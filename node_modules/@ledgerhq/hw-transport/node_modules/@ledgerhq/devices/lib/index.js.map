{"version":3,"sources":["../src/index.js"],"names":["IIGenericHID","IIKeyboardHID","IIU2F","IICCID","IIWebUSB","devices","blue","id","productName","productIdMM","legacyUsbProductId","usbOnly","nanoS","nanoX","bluetoothSpec","serviceUuid","notifyUuid","writeUuid","devicesList","Object","values","ledgerUSBVendorId","getDeviceModel","info","Error","identifyUSBProductId","usbProductId","legacy","find","d","mm","deviceModel","bluetoothServices","serviceUuidToInfos","i","length","spec","push","replace","getBluetoothServiceUuids","getInfosForServiceUuid","uuid","toLowerCase"],"mappings":";;;;;;;;AAEA;;;;;;;;;;;;;;;;AAgBO,IAAMA,sCAAe,IAArB;AACA,IAAMC,wCAAgB,IAAtB;AACA,IAAMC,wBAAQ,IAAd;AACA,IAAMC,0BAAS,IAAf;AACA,IAAMC,8BAAW,IAAjB;;AAEP,IAAMC,UAAU;AACdC,QAAM;AACJC,QAAI,MADA;AAEJC,iBAAa,aAFT;AAGJC,iBAAa,CAHT;AAIJC,wBAAoB,MAJhB;AAKJC,aAAS;AALL,GADQ;AAQdC,SAAO;AACLL,QAAI,OADC;AAELC,iBAAa,eAFR;AAGLC,iBAAa,CAHR;AAILC,wBAAoB,MAJf;AAKLC,aAAS;AALJ,GARO;AAedE,SAAO;AACLN,QAAI,OADC;AAELC,iBAAa,eAFR;AAGLC,iBAAa,CAHR;AAILC,wBAAoB,MAJf;AAKLC,aAAS,KALJ;AAMLG,mBAAe,CACb;AACE;AACAC,mBAAa,sCAFf;AAGEC,kBAAY,sCAHd;AAIEC,iBAAW;AAJb,KADa,EAOb;AACEF,mBAAa,sCADf;AAEEC,kBAAY,sCAFd;AAGEC,iBAAW;AAHb,KAPa;AANV;AAfO,CAAhB;;AAqCA;AACA,IAAMC,cAA6BC,OAAOC,MAAP,CAAcf,OAAd,CAAnC;;AAEA;;;AAGO,IAAMgB,gDAAoB,MAA1B;;AAEP;;;AAGO,IAAMC,0CAAiB,SAAjBA,cAAiB,CAACf,EAAD,EAAoC;AAChE,MAAMgB,OAAOlB,QAAQE,EAAR,CAAb;AACA,MAAI,CAACgB,IAAL,EAAW,MAAM,IAAIC,KAAJ,CAAU,aAAajB,EAAb,GAAkB,kBAA5B,CAAN;AACX,SAAOgB,IAAP;AACD,CAJM;;AAMP;;;AAGO,IAAME,sDAAuB,SAAvBA,oBAAuB,CAACC,YAAD,EAAwC;AAC1E,MAAMC,SAAST,YAAYU,IAAZ,CAAiB;AAAA,WAAKC,EAAEnB,kBAAF,KAAyBgB,YAA9B;AAAA,GAAjB,CAAf;AACA,MAAIC,MAAJ,EAAY,OAAOA,MAAP;AACZ,MAAMG,KAAKJ,gBAAgB,CAA3B;AACA,MAAMK,cAAcb,YAAYU,IAAZ,CAAiB;AAAA,WAAKC,EAAEpB,WAAF,KAAkBqB,EAAvB;AAAA,GAAjB,CAApB;AACA,SAAOC,WAAP;AACD,CANM;;AAQP,IAAMC,oBAA8B,EAApC;AACA,IAAMC,qBAEF,EAFJ;;AAIA,KAAK,IAAI1B,GAAT,IAAeF,OAAf,EAAwB;AACtB,MAAM0B,eAAc1B,QAAQE,GAAR,CAApB;AADsB,MAEdO,cAFc,GAEIiB,YAFJ,CAEdjB,aAFc;;AAGtB,MAAIA,cAAJ,EAAmB;AACjB,SAAK,IAAIoB,IAAI,CAAb,EAAgBA,IAAIpB,eAAcqB,MAAlC,EAA0CD,GAA1C,EAA+C;AAC7C,UAAME,OAAOtB,eAAcoB,CAAd,CAAb;AACAF,wBAAkBK,IAAlB,CAAuBD,KAAKrB,WAA5B;AACAkB,yBAAmBG,KAAKrB,WAAxB,IAAuCkB,mBACrCG,KAAKrB,WAAL,CAAiBuB,OAAjB,CAAyB,IAAzB,EAA+B,EAA/B,CADqC,eAEjCP,yBAFiC,IAEjBK,IAFiB,CAAvC;AAGD;AACF;AACF;;AAED;;;AAGO,IAAMG,8DAA2B,SAA3BA,wBAA2B;AAAA,SAAMP,iBAAN;AAAA,CAAjC;;AAEP;;;AAGO,IAAMQ,0DAAyB,SAAzBA,sBAAyB,CAACC,IAAD;AAAA,SACpCR,mBAAmBQ,KAAKC,WAAL,EAAnB,CADoC;AAAA,CAA/B;;AAGP;;;;;AAKA;;;;;AAgBA","file":"index.js","sourcesContent":["// @flow\n\n/**\n * The USB product IDs will be defined as MMII, encoding a model (MM) and an interface bitfield (II)\n *\n ** Model\n * Ledger Nano S : 0x10\n * Ledger Blue : 0x00\n * Ledger Nano X : 0x40\n *\n ** Interface support bitfield\n * Generic HID : 0x01\n * Keyboard HID : 0x02\n * U2F : 0x04\n * CCID : 0x08\n * WebUSB : 0x10\n */\n\nexport const IIGenericHID = 0x01;\nexport const IIKeyboardHID = 0x02;\nexport const IIU2F = 0x04;\nexport const IICCID = 0x08;\nexport const IIWebUSB = 0x10;\n\nconst devices = {\n  blue: {\n    id: \"blue\",\n    productName: \"Ledger Blue\",\n    productIdMM: 0,\n    legacyUsbProductId: 0x0000,\n    usbOnly: true\n  },\n  nanoS: {\n    id: \"nanoS\",\n    productName: \"Ledger Nano S\",\n    productIdMM: 1,\n    legacyUsbProductId: 0x0001,\n    usbOnly: true\n  },\n  nanoX: {\n    id: \"nanoX\",\n    productName: \"Ledger Nano X\",\n    productIdMM: 4,\n    legacyUsbProductId: 0x0004,\n    usbOnly: false,\n    bluetoothSpec: [\n      {\n        // this is the legacy one (prototype version). we will eventually drop it.\n        serviceUuid: \"d973f2e0-b19e-11e2-9e96-0800200c9a66\",\n        notifyUuid: \"d973f2e1-b19e-11e2-9e96-0800200c9a66\",\n        writeUuid: \"d973f2e2-b19e-11e2-9e96-0800200c9a66\"\n      },\n      {\n        serviceUuid: \"13d63400-2c97-0004-0000-4c6564676572\",\n        notifyUuid: \"13d63400-2c97-0004-0001-4c6564676572\",\n        writeUuid: \"13d63400-2c97-0004-0002-4c6564676572\"\n      }\n    ]\n  }\n};\n\n// $FlowFixMe\nconst devicesList: DeviceModel[] = Object.values(devices);\n\n/**\n *\n */\nexport const ledgerUSBVendorId = 0x2c97;\n\n/**\n *\n */\nexport const getDeviceModel = (id: DeviceModelId): DeviceModel => {\n  const info = devices[id];\n  if (!info) throw new Error(\"device '\" + id + \"' does not exist\");\n  return info;\n};\n\n/**\n *\n */\nexport const identifyUSBProductId = (usbProductId: number): ?DeviceModel => {\n  const legacy = devicesList.find(d => d.legacyUsbProductId === usbProductId);\n  if (legacy) return legacy;\n  const mm = usbProductId >> 8;\n  const deviceModel = devicesList.find(d => d.productIdMM === mm);\n  return deviceModel;\n};\n\nconst bluetoothServices: string[] = [];\nconst serviceUuidToInfos: {\n  [_: string]: BluetoothInfos\n} = {};\n\nfor (let id in devices) {\n  const deviceModel = devices[id];\n  const { bluetoothSpec } = deviceModel;\n  if (bluetoothSpec) {\n    for (let i = 0; i < bluetoothSpec.length; i++) {\n      const spec = bluetoothSpec[i];\n      bluetoothServices.push(spec.serviceUuid);\n      serviceUuidToInfos[spec.serviceUuid] = serviceUuidToInfos[\n        spec.serviceUuid.replace(/-/g, \"\")\n      ] = { deviceModel, ...spec };\n    }\n  }\n}\n\n/**\n *\n */\nexport const getBluetoothServiceUuids = () => bluetoothServices;\n\n/**\n *\n */\nexport const getInfosForServiceUuid = (uuid: string): ?BluetoothInfos =>\n  serviceUuidToInfos[uuid.toLowerCase()];\n\n/**\n *\n */\nexport type DeviceModelId = $Keys<typeof devices>;\n\n/**\n *\n */\nexport type DeviceModel = {\n  id: DeviceModelId,\n  productName: string,\n  productIdMM: number,\n  legacyUsbProductId: number,\n  usbOnly: boolean,\n  bluetoothSpec?: Array<{\n    serviceUuid: string,\n    writeUuid: string,\n    notifyUuid: string\n  }>\n};\n\n/**\n *\n */\nexport type BluetoothInfos = {\n  deviceModel: DeviceModel,\n  serviceUuid: string,\n  writeUuid: string,\n  notifyUuid: string\n};\n"]}