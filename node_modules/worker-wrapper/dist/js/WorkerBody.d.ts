import { IAddProcessorTask, IResponse, IWorkTask, TTask } from './interface';
import { Parser, Serializer } from '.';
export declare const enum MESSAGE_TYPE {
    ADD_LIBS = 0,
    ADD_PROCESSOR = 1,
    WORK = 2
}
export declare class WorkerBody {
    static Serializer: typeof Serializer;
    static Parser: typeof Parser;
    private readonly _stringifyMode;
    private readonly _serializer;
    private readonly _parser;
    private child;
    constructor(Serialize: typeof Serializer, Parse: typeof Parser, stringifyMode: boolean);
    protected setHandlers(): void;
    protected onMessage(message: TTask): void;
    protected addLibs(libs: Array<string>): void;
    protected addProcessor(data: IAddProcessorTask): void;
    protected process(cb: Function, id: string): void;
    protected send(data: IResponse<any>): void;
    protected doWork(message: IWorkTask): void;
}
