import { IAnyClass, ICallback, IConfig, ISimpleWrap, IWrapProcess } from './interface';
export * from './WorkerBody';
export * from './Serializer';
export * from './Parser';
export * from './Wrap';
export * from './Wrap';
export declare function create<T, R>(child: IAnyClass<T, R> | ICallback<R, T>, params: R, options?: Partial<IConfig>): IWrapProcess<T>;
export declare function create<T>(child: IAnyClass<T, void> | ICallback<void, T>, options?: Partial<IConfig>): IWrapProcess<T>;
export declare function create<T, R>(child: IAnyClass<T, R> | ICallback<R, T>, params: R): IWrapProcess<T>;
export declare function create<T>(child: IAnyClass<T, void> | ICallback<void, T>): IWrapProcess<T>;
export declare function create(options: Partial<IConfig>): ISimpleWrap;
export declare function create(): ISimpleWrap;
export declare function getConfig(): Readonly<IConfig>;
export declare function config(config: Partial<IConfig>): void;
