"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Signal_1 = require("./Signal");
var Receiver = (function () {
    function Receiver() {
    }
    Receiver.prototype.receive = function (signal, handler, context) {
        receive.call(this, signal, handler, context, false);
    };
    Receiver.prototype.receiveOnce = function (signal, handler, context) {
        receive.call(this, signal, handler, context, true);
    };
    Receiver.prototype.stopReceive = function (arg1, arg2) {
        var _this = this;
        if (!this.__received) {
            return null;
        }
        var signal = isSignal(arg1) ? arg1 : null;
        var handler = (signal ? arg2 : arg1);
        if (!signal) {
            Object.keys(this.__received).forEach(function (cid) {
                _this.stopReceive(_this.__received[cid].signal, arg2);
            });
            return null;
        }
        if (!this.__received[signal.cid] || !this.__received[signal.cid].handlers) {
            return null;
        }
        if (!handler) {
            this.__received[signal.cid].handlers.slice().forEach(function (myHandler) {
                _this.stopReceive(arg1, myHandler);
            });
            return null;
        }
        var handlers = this.__received[signal.cid].handlers;
        for (var i = handlers.length; i--;) {
            if (handlers[i] === arg2) {
                handlers.splice(i, 1);
                this.__received[signal.cid].signal.off(arg2, this);
            }
        }
        if (!handlers.length) {
            delete this.__received[signal.cid];
        }
    };
    return Receiver;
}());
exports.Receiver = Receiver;
function receive(signal, handler, context, isOnce) {
    if (!this.__received) {
        this.__received = Object.create(null);
    }
    if (isOnce) {
        signal.once(handler, context, this);
    }
    else {
        signal.on(handler, context, this);
    }
    if (!this.__received[signal.cid]) {
        this.__received[signal.cid] = {
            handlers: [handler],
            signal: signal
        };
    }
    else {
        this.__received[signal.cid].handlers.push(handler);
    }
}
function isSignal(some) {
    return some && (some instanceof Signal_1.Signal);
}
//# sourceMappingURL=Receiver.js.map