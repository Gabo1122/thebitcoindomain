import { Iterator } from './Iterator';
export declare const enum PATH_TYPE {
    Object = 0,
    Array = 1,
}
export declare class Path {
    length: number;
    private _path;
    constructor(path: Array<IPathItem>);
    reverse(): Path;
    iterator(): Iterator<IPathData>;
    slice(start: number, end: number): Path;
    forEach(cb: (data: IPathData, index?: number) => any, context?: any): void;
    some(cb: (data: IPathData, index?: number) => any, context?: any): boolean;
    toString(): string;
    getItemData(index: number): IPathData;
    static parse(path: string): Path;
    private static getContainer(type);
}
export interface IPathItem {
    type: PATH_TYPE;
    name: string;
}
export interface IPathData {
    name: string;
    container: Array<any> | object;
    nextContainer?: Array<any> | object;
}
