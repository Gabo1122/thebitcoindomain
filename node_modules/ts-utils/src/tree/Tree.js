"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var BaseTree_1 = require("./BaseTree");
var filters_1 = require("../filters");
var Tree = (function (_super) {
    __extends(Tree, _super);
    function Tree(data, options) {
        return _super.call(this, data, null, options) || this;
    }
    Tree.prototype.where = function (data) {
        var _this = this;
        var filter = typeof data === 'object' ? filters_1.containsDeep(data) : filters_1.contains(data);
        return Object.keys(this._childHash).reduce(function (result, item, i) {
            if (filter(_this._childHash[item].getData())) {
                result.push(_this._childHash[item]);
            }
            return result;
        }, []);
    };
    Tree.prototype.registerChild = function (child) {
        if (!this._childHash) {
            this._childHash = Object.create(null);
        }
        if (child !== this) {
            if (this._childHash[child.id]) {
                throw new Error('Duplicate ID');
            }
            else {
                this._childHash[child.id] = child;
            }
        }
    };
    Tree.prototype.getPath = function (id) {
        var item = this.find(id);
        if (!item) {
            return null;
        }
        var result = [];
        var tmp = item;
        do {
            result.push(tmp.id);
            tmp = tmp.getParent();
        } while (tmp.getParent());
        return result.reverse();
    };
    Tree.prototype.getRoot = function () {
        return this;
    };
    Tree.prototype.find = function (id) {
        return this._childHash[id];
    };
    return Tree;
}(BaseTree_1.BaseTree));
exports.Tree = Tree;
//# sourceMappingURL=Tree.js.map