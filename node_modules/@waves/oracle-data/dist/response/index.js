"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("../constants");
function schema() {
    var processors = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        processors[_i] = arguments[_i];
    }
    var errors = [];
    return function (hash) {
        var store = Object.create(null);
        var content = processors.reduce(function (acc, item) { return item(errors)(acc, hash); }, store);
        if (!errors.length) {
            return {
                content: content,
                status: constants_1.RESPONSE_STATUSES.OK
            };
        }
        else {
            return {
                content: content,
                errors: errors,
                status: constants_1.RESPONSE_STATUSES.ERROR
            };
        }
    };
}
exports.schema = schema;
function processField(from, to, type, required) {
    return function (errors) {
        return function (store, hash) {
            try {
                store[to] = getFieldValue(hash, from, type);
                return store;
            }
            catch (e) {
                if (required || required == null) {
                    errors.push({
                        path: to,
                        error: e
                    });
                }
            }
            return store;
        };
    };
}
exports.processField = processField;
function addAssetId(id) {
    return function (errors) {
        return function (store) {
            store.id = id;
            return store;
        };
    };
}
exports.addAssetId = addAssetId;
function processDescription(id, required) {
    return function (errors) { return function (store, hash) {
        try {
            var langList = getFieldValue(hash, constants_1.DATA_PROVIDER_KEYS.LANG_LIST, constants_1.DATA_ENTRY_TYPES.STRING);
            var description_1 = Object.create(null);
            langList.split(',').forEach(function (lang) {
                var key = getDescriptionKey(lang, id);
                try {
                    description_1[lang] = getFieldValue(hash, key, constants_1.DATA_ENTRY_TYPES.STRING);
                }
                catch (e) {
                    if (required || required == null) {
                        errors.push({
                            path: "description." + lang,
                            error: e
                        });
                    }
                }
            });
            if (Object.keys(description_1).length) {
                store.description = description_1;
            }
        }
        catch (e) {
            if (required || required == null) {
                errors.push({
                    path: 'description',
                    error: e
                });
            }
        }
        return store;
    }; };
}
exports.processDescription = processDescription;
function getFieldValue(hash, fieldName, type) {
    var item = hash[fieldName];
    if (!item) {
        throw new Error("Has no field with name " + fieldName);
    }
    if (item.type !== type) {
        throw new Error("Wrong field type! " + item.type + " is not equal to " + type);
    }
    return item.value;
}
exports.getFieldValue = getFieldValue;
function getDescriptionKey(lang, id) {
    return id ?
        "description_<LANG>_<ASSET_ID>"
            .replace(constants_1.PATTERNS.LANG, "<" + lang + ">")
            .replace(constants_1.PATTERNS.ASSET_ID, "<" + id + ">") :
        constants_1.DATA_PROVIDER_DESCRIPTION_PATTERN
            .replace(constants_1.PATTERNS.LANG, "<" + lang + ">");
}
function getAssetIdFromKey(key) {
    var start = "status_<ASSET_ID>".replace(constants_1.PATTERNS.ASSET_ID, '');
    if (key.indexOf(start) !== 0) {
        return null;
    }
    var id = (key.match(/<(.+)?>/) || [])[1];
    return id && "status_<ASSET_ID>".replace(constants_1.PATTERNS.ASSET_ID, "<" + id + ">") === key ? id : null;
}
exports.getAssetIdFromKey = getAssetIdFromKey;
function isString(some) {
    return typeof some === 'string';
}
exports.isString = isString;
//# sourceMappingURL=index.js.map