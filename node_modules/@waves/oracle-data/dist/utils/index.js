"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("../constants");
function getFieldsDiff(previous, next) {
    var hashable = toHash('key');
    var previousHash = hashable(previous);
    return next.filter(function (item) {
        if (!previousHash[item.key]) {
            return true;
        }
        return previousHash[item.key].type !== item.type || previousHash[item.key].value !== item.value;
    });
}
exports.getFieldsDiff = getFieldsDiff;
function isProvider(data) {
    var onlyAssetFields = ['id', 'status'];
    return !onlyAssetFields.every(function (propName) { return (propName in data); });
}
exports.isProvider = isProvider;
function toHash(key) {
    return function (list) { return list.reduce(function (acc, item) {
        acc[item[key]] = item;
        return acc;
    }, Object.create(null)); };
}
exports.toHash = toHash;
function toFields() {
    var processors = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        processors[_i] = arguments[_i];
    }
    return function (data) {
        return processors.reduce(function (acc, processor) {
            var result = processor(data);
            Array.isArray(result) ? acc.push.apply(acc, result) : acc.push(result);
            return acc;
        }, []);
    };
}
exports.toFields = toFields;
function toField(dataName, key, type) {
    return function (data) {
        var value = data[dataName];
        if (value == null) {
            throw new Error("Empty field " + dataName + "!");
        }
        checkType(value, type);
        return {
            value: value,
            type: type,
            key: key
        };
    };
}
exports.toField = toField;
function descriptionToField() {
    return function (data) {
        var langList = Object.keys(data.description || {}).join(',');
        var fields = Object.keys(data.description || {}).map(function (lang) {
            return {
                key: constants_1.DATA_PROVIDER_DESCRIPTION_PATTERN.replace(constants_1.PATTERNS.LANG, "<" + lang + ">"),
                type: constants_1.DATA_ENTRY_TYPES.STRING,
                value: data.description[lang]
            };
        });
        fields.push({
            key: constants_1.DATA_PROVIDER_KEYS.LANG_LIST,
            type: constants_1.DATA_ENTRY_TYPES.STRING,
            value: langList
        });
        return fields;
    };
}
exports.descriptionToField = descriptionToField;
function addVersion(version) {
    return function () { return ({
        key: constants_1.DATA_PROVIDER_KEYS.VERSION,
        type: constants_1.DATA_ENTRY_TYPES.INTEGER,
        value: version
    }); };
}
exports.addVersion = addVersion;
function checkType(value, type) {
    var valueType = typeof value;
    switch (type) {
        case constants_1.DATA_ENTRY_TYPES.INTEGER:
            if (typeof value !== 'number') {
                throw new Error("Wrong value type! " + valueType + " is not assignable to type number!");
            }
            break;
        case constants_1.DATA_ENTRY_TYPES.STRING:
        case constants_1.DATA_ENTRY_TYPES.BINARY:
            if (typeof value !== 'string') {
                throw new Error("Wrong value type! " + valueType + " is not assignable to type string!");
            }
            break;
        case constants_1.DATA_ENTRY_TYPES.BOOLEAN:
            if (typeof value !== 'boolean') {
                throw new Error("Wrong value type! " + valueType + " is not assignable to type boolean!");
            }
            break;
    }
}
function addAssetVersion(version) {
    return function (data) { return ({
        key: replaceKey(data.id)("version_<ASSET_ID>"),
        type: constants_1.DATA_ENTRY_TYPES.INTEGER,
        value: version
    }); };
}
exports.addAssetVersion = addAssetVersion;
function toAssetField(from, key, type) {
    return function (data) {
        var value = data[from];
        if (value == null) {
            return [];
        }
        checkType(value, type);
        return {
            key: replaceKey(data.id)(key),
            type: type,
            value: value
        };
    };
}
exports.toAssetField = toAssetField;
function toAssetDescription() {
    return function (data) { return Object.keys(data.description || {}).map(function (lang) {
        var replacer = replaceKey(data.id, lang);
        return {
            key: replacer("description_<LANG>_<ASSET_ID>"),
            type: constants_1.DATA_ENTRY_TYPES.STRING,
            value: data.description[lang]
        };
    }); };
}
exports.toAssetDescription = toAssetDescription;
function replaceKey(id, lang) {
    return function (key) { return lang ?
        key.replace(constants_1.PATTERNS.ASSET_ID, "<" + id + ">")
            .replace(constants_1.PATTERNS.LANG, "<" + lang + ">") :
        key.replace(constants_1.PATTERNS.ASSET_ID, "<" + id + ">"); };
}
exports.replaceKey = replaceKey;
//# sourceMappingURL=index.js.map