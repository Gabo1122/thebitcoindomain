import { EventEmitter } from 'typed-ts-events';
export declare class WindowProtocol<T> extends EventEmitter<WindowProtocol.IEvents<T>> {
    private win;
    private readonly handler;
    constructor(win: WindowProtocol.IWindow, type: WindowProtocol.TProtocolType);
    dispatch<R>(data: R): this;
    destroy(): void;
    private static _fakeWin;
}
export declare namespace WindowProtocol {
    const PROTOCOL_TYPES: {
        LISTEN: "listen";
        DISPATCH: "dispatch";
    };
    interface IWindow {
        postMessage: typeof window['postMessage'];
        addEventListener: typeof window['addEventListener'];
        removeEventListener: typeof window['removeEventListener'];
    }
    interface IMessageEvent<T> extends MessageEvent {
        data: T;
    }
    interface IEvents<T> {
        message: IMessageEvent<T>;
    }
    type TProtocolType = 'listen' | 'dispatch';
}
