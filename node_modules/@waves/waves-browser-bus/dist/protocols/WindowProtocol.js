"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var typed_ts_events_1 = require("typed-ts-events");
var WindowProtocol = /** @class */ (function (_super) {
    __extends(WindowProtocol, _super);
    function WindowProtocol(win, type) {
        var _this = _super.call(this) || this;
        _this.win = win;
        _this.handler = function (event) {
            _this.trigger('message', event);
        };
        if (type === WindowProtocol.PROTOCOL_TYPES.LISTEN) {
            _this.win.addEventListener('message', _this.handler, false);
        }
        return _this;
    }
    WindowProtocol.prototype.dispatch = function (data) {
        this.win.postMessage(data, '*');
        return this;
    };
    WindowProtocol.prototype.destroy = function () {
        this.win.removeEventListener('message', this.handler, false);
        this.win = WindowProtocol._fakeWin;
    };
    WindowProtocol._fakeWin = (function () {
        var empty = function () { return null; };
        return {
            postMessage: empty,
            addEventListener: empty,
            removeEventListener: empty
        };
    })();
    return WindowProtocol;
}(typed_ts_events_1.EventEmitter));
exports.WindowProtocol = WindowProtocol;
/* istanbul ignore next */
(function (WindowProtocol) {
    WindowProtocol.PROTOCOL_TYPES = {
        LISTEN: 'listen',
        DISPATCH: 'dispatch'
    };
})(WindowProtocol = exports.WindowProtocol || (exports.WindowProtocol = {}));
exports.WindowProtocol = WindowProtocol;
