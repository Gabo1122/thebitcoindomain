"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var Adapter_1 = require("./Adapter");
var __1 = require("..");
var WindowProtocol_1 = require("../protocols/WindowProtocol");
var utils_1 = require("../utils/utils");
var EMPTY_OPTIONS = { origins: [], availableChanelId: [] };
var WindowAdapter = /** @class */ (function (_super) {
    __extends(WindowAdapter, _super);
    function WindowAdapter(listen, dispatch, options) {
        var _this = _super.call(this) || this;
        _this.id = __1.uniqueId('wa');
        _this.callbacks = [];
        _this.options = WindowAdapter.prepareOptions(options);
        _this.listen = listen;
        _this.dispatch = dispatch;
        _this.listen.forEach(function (protocol) { return protocol.on('message', _this.onMessage, _this); });
        return _this;
    }
    WindowAdapter.prototype.addListener = function (cb) {
        this.callbacks.push(cb);
        __1.console.info('WindowAdapter: Add iframe message listener');
        return this;
    };
    WindowAdapter.prototype.send = function (data) {
        var message = __assign({}, data, { chanelId: this.chanelId });
        this.dispatch.forEach(function (protocol) { return protocol.dispatch(message); });
        __1.console.info('WindowAdapter: Send message', message);
        return this;
    };
    WindowAdapter.prototype.destroy = function () {
        this.listen.forEach(function (protocol) { return protocol.destroy(); });
        this.dispatch.forEach(function (protocol) { return protocol.destroy(); });
        __1.console.info('WindowAdapter: Destroy');
    };
    WindowAdapter.prototype.onMessage = function (event) {
        if (this.accessEvent(event)) {
            this.callbacks.forEach(function (cb) {
                try {
                    cb(event.data);
                }
                catch (e) {
                    __1.console.warn('WindowAdapter: Unhandled exception!', e);
                }
            });
        }
    };
    WindowAdapter.prototype.accessEvent = function (event) {
        if (typeof event.data !== 'object' || event.data.type == null) {
            __1.console.info('WindowAdapter: Block event. Wrong event format!', event.data);
            return false;
        }
        if (!this.options.origins.has('*') && !this.options.origins.has(event.origin)) {
            __1.console.info("SimpleWindowAdapter: Block event by origin \"" + event.origin + "\"");
            return false;
        }
        if (!this.options.availableChanelId.size) {
            return true;
        }
        var access = !!(event.data.chanelId && this.options.availableChanelId.has(event.data.chanelId));
        if (!access) {
            __1.console.info("SimpleWindowAdapter: Block event by chanel id \"" + event.data.chanelId + "\"");
        }
        return access;
    };
    WindowAdapter.createSimpleWindowAdapter = function (iframe, options) {
        var _this = this;
        var origin = this.getContentOrigin(iframe);
        var myOptions = this.prepareOptions(options);
        var events = [];
        if (origin) {
            myOptions.origins.add(origin);
        }
        var listen = new WindowProtocol_1.WindowProtocol(window, WindowProtocol_1.WindowProtocol.PROTOCOL_TYPES.LISTEN);
        var handler = function (event) {
            events.push(event);
        };
        listen.on('message', handler);
        return this.getIframeContent(iframe)
            .then(function (win) {
            var dispatch = new WindowProtocol_1.WindowProtocol(win.win, WindowProtocol_1.WindowProtocol.PROTOCOL_TYPES.DISPATCH);
            var adapter = new WindowAdapter([listen], [dispatch], _this.unPrepareOptions(myOptions));
            events.forEach(function (event) {
                adapter.onMessage(event);
            });
            listen.off('message', handler);
            return adapter;
        });
    };
    WindowAdapter.prepareOptions = function (options) {
        if (options === void 0) { options = EMPTY_OPTIONS; }
        var concat = function (initialValue) { return function (list) { return list.reduce(function (set, item) { return set.add(item); }, initialValue); }; };
        var getCollection = function (data, initial) { return utils_1.pipe(__1.toArray, concat(initial))(data); };
        var origins = getCollection(options.origins || [], new __1.UniqPrimitiveCollection([window.location.origin]));
        var chanelId = getCollection(options.availableChanelId || [], new __1.UniqPrimitiveCollection());
        return __assign({}, options, { origins: origins, availableChanelId: chanelId });
    };
    WindowAdapter.unPrepareOptions = function (options) {
        return {
            origins: options.origins.toArray(),
            availableChanelId: options.availableChanelId.toArray(),
            chanelId: options.chanelId
        };
    };
    WindowAdapter.getIframeContent = function (content) {
        if (!content) {
            return Promise.resolve({ win: window.opener || window.parent });
        }
        if (!(content instanceof HTMLIFrameElement)) {
            return Promise.resolve({ win: content });
        }
        if (content.contentWindow) {
            return Promise.resolve({ win: content.contentWindow });
        }
        return new Promise(function (resolve, reject) {
            content.addEventListener('load', function () { return resolve({ win: content.contentWindow }); }, false);
            content.addEventListener('error', reject, false);
        });
    };
    WindowAdapter.getContentOrigin = function (content) {
        if (!content) {
            try {
                return new URL(document.referrer).origin;
            }
            catch (e) {
                return null;
            }
        }
        if (!(content instanceof HTMLIFrameElement)) {
            try {
                return window.top.origin;
            }
            catch (e) {
                return null;
            }
        }
        try {
            return new URL(content.src).origin || null;
        }
        catch (e) {
            return null;
        }
    };
    return WindowAdapter;
}(Adapter_1.Adapter));
exports.WindowAdapter = WindowAdapter;
