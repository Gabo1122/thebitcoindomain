import { Adapter } from './Adapter';
import { IOneArgFunction, TChanelId, TMessageContent } from '..';
import { WindowProtocol } from '../protocols/WindowProtocol';
declare type TOrList<T> = T | Array<T>;
declare type TContent = HTMLIFrameElement | WindowProtocol.IWindow;
export declare class WindowAdapter extends Adapter {
    readonly id: string;
    private readonly chanelId;
    private readonly dispatch;
    private readonly listen;
    private readonly options;
    private readonly callbacks;
    constructor(listen: Array<WindowProtocol<TMessageContent>>, dispatch: Array<WindowProtocol<TMessageContent>>, options?: Partial<WindowAdapter.IOptions<TOrList<string>, TOrList<TChanelId>>>);
    addListener(cb: IOneArgFunction<TMessageContent, void>): this;
    send(data: TMessageContent): this;
    destroy(): void;
    private onMessage;
    private accessEvent;
    static createSimpleWindowAdapter(iframe?: TContent, options?: WindowAdapter.IOptions<TOrList<string>, TOrList<TChanelId>>): Promise<WindowAdapter>;
    private static prepareOptions;
    private static unPrepareOptions;
    private static getIframeContent;
    private static getContentOrigin;
}
export declare namespace WindowAdapter {
    interface IOptions<ORIGINS, CHANEL_ID> {
        origins: ORIGINS;
        availableChanelId: CHANEL_ID;
        chanelId?: TChanelId;
    }
}
export {};
