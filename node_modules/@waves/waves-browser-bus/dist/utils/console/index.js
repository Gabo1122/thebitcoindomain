"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var config_1 = require("../../config");
var utils_1 = require("../utils");
/* istanbul ignore next */
var consoleModule = (function (root) {
    return root.console;
})(self || global);
var storage = Object.create(null);
function addNamespace(type) {
    if (!storage[type]) {
        storage[type] = [];
    }
}
function saveEvent(type, args) {
    storage[type].push(args);
}
function generateConsole() {
    return utils_1.keys(config_1.config.console.methodsData).reduce(function (api, method) {
        api[method] = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            if (config_1.config.console.logLevel < config_1.config.console.methodsData[method].logLevel) {
                if (config_1.config.console.methodsData[method].save) {
                    addNamespace(method);
                    saveEvent(method, args);
                }
            }
            else {
                consoleModule[method].apply(consoleModule, args);
            }
        };
        return api;
    }, Object.create(null));
}
exports.console = __assign({}, generateConsole(), { getSavedMessages: function (type) {
        return storage[type] || [];
    } });
