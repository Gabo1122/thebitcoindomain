import { Adapter } from '../adapters/Adapter';
export declare const enum EventType {
    Event = 0,
    Action = 1,
    Response = 2
}
export declare const enum ResponseStatus {
    Success = 0,
    Error = 1
}
export declare class Bus<T extends Record<string, any> = any> {
    id: string;
    private _adapter;
    private readonly _activeRequestHash;
    private readonly _timeout;
    private readonly _eventHandlers;
    private readonly _requestHandlers;
    constructor(adapter: Adapter, defaultTimeout?: number);
    dispatchEvent<K extends keyof T>(name: K, data: T[K]): this;
    request<T>(name: string, data?: any, timeout?: number): Promise<T>;
    on<K extends keyof T>(name: K, handler: IOneArgFunction<T[K], void>, context?: any): this;
    once<K extends keyof T>(name: K, handler: IOneArgFunction<T[K], void>, context?: any): this;
    off(name?: string, handler?: IOneArgFunction<T[keyof T], void>): this;
    off<K extends keyof T>(name?: K, handler?: IOneArgFunction<T[K], void>): this;
    registerRequestHandler(name: string, handler: IOneArgFunction<any, any>): this;
    unregisterHandler(name: string): this;
    changeAdapter(adapter: Adapter): Bus;
    destroy(): void;
    private _addEventHandler;
    private _onMessage;
    private _createResponse;
    private _fireEndAction;
    private _fireEvent;
    static _createEvent(eventName: string, data: any): IEventData;
    static _isPromise(some: any): some is Promise<any>;
}
export interface IOneArgFunction<T, R> {
    (data: T): R;
}
export declare type TMessageContent = IEventData | IRequestData | IResponseData;
export declare type TChanelId = string | number;
export interface IEventData {
    type: EventType.Event;
    chanelId?: TChanelId | undefined;
    name: string;
    data?: any;
}
export interface IRequestData {
    id: string | number;
    chanelId?: TChanelId | undefined;
    type: EventType.Action;
    name: string;
    data?: any;
}
export interface IResponseData {
    id: string | number;
    chanelId?: TChanelId | undefined;
    type: EventType.Response;
    status: ResponseStatus;
    content: any;
}
