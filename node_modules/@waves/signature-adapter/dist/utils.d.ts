import { BigNumber } from '@waves/bignumber';
import { IExchangeTransactionOrder, TTransaction } from '@waves/ts-types';
export declare function find<T>(some: Partial<T>, list: Array<T>): T | null;
export declare function isEmpty(some: unknown): some is undefined;
export declare function normalizeAssetId(assetId: string): string;
export declare function last<T>(list: Array<T>): T;
export declare const TRANSACTION_TYPE: {
    GENESIS: 1;
    PAYMENT: 2;
    ISSUE: 3;
    TRANSFER: 4;
    REISSUE: 5;
    BURN: 6;
    EXCHANGE: 7;
    LEASE: 8;
    CANCEL_LEASE: 9;
    ALIAS: 10;
    MASS_TRANSFER: 11;
    DATA: 12;
    SET_SCRIPT: 13;
    SPONSORSHIP: 14;
    SET_ASSET_SCRIPT: 15;
    SCRIPT_INVOCATION: 16;
};
export declare function currentCreateOrderFactory(config: IFeeConfig, minOrderFee: BigNumber): (order: IExchangeTransactionOrder<BigNumber>, hasMatcherScript?: boolean, smartAssetIdList?: Array<string>) => BigNumber;
export declare function currentFeeFactory(config: IFeeConfig): (tx: TTransaction<BigNumber>, bytes: Uint8Array, hasAccountScript: boolean, smartAssetIdList?: Array<string>) => BigNumber;
export interface IFeeConfig {
    smart_asset_extra_fee: BigNumber;
    smart_account_extra_fee: BigNumber;
    calculate_fee_rules: Record<number, Partial<IFeeConfigItem>> & {
        default: IFeeConfigItem;
    };
}
export interface IFeeConfigItem {
    price_per_transfer?: BigNumber;
    price_per_kb?: BigNumber;
    add_smart_asset_fee: boolean;
    add_smart_account_fee: boolean;
    min_price_step: BigNumber;
    fee: BigNumber;
    nftFee: BigNumber;
}
