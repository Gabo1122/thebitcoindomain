"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var prepareTx_1 = require("./prepareTx");
var utils_1 = require("./utils");
var constants_1 = require("./constants");
var SignError_1 = require("./SignError");
var waves_transactions_1 = require("@waves/waves-transactions");
var money_like_to_node_1 = require("@waves/money-like-to-node");
var bignumber_1 = require("@waves/bignumber");
var prepareTx_2 = require("./prepareTx");
var _a = waves_transactions_1.libs.crypto, base58Encode = _a.base58Encode, blake2b = _a.blake2b, verifySignature = _a.verifySignature;
var Signable = (function () {
    function Signable(forSign, adapter) {
        this._signMethod = 'signRequest';
        this._proofs = [];
        var networkCode = adapter.getNetworkByte();
        this._forSign = __assign({}, forSign);
        this.type = forSign.type;
        this._adapter = adapter;
        var prepareMap = prepareTx_1.getValidateSchema(networkCode)[forSign.type];
        if (!prepareMap) {
            throw new SignError_1.SignError("Can't find prepare api for tx type \"" + forSign.type + "\"!", constants_1.ERRORS.UNKNOWN_SIGN_TYPE);
        }
        this._forSign.data.timestamp = new Date(this._forSign.data.timestamp || Date.now()).getTime();
        if (this._forSign.data.proofs) {
            this._proofs = this._forSign.data.proofs.slice();
        }
        var availableVersions = adapter.getSignVersions()[forSign.type];
        if (availableVersions.length === 0) {
            throw new SignError_1.SignError("Can't sign data with type " + this.type, constants_1.ERRORS.NO_SUPPORTED_VERSIONS);
        }
        if (utils_1.isEmpty(this._forSign.data.version)) {
            this._forSign.data.version = utils_1.last(availableVersions);
        }
        var version = this._forSign.data.version;
        if (!availableVersions.includes(version)) {
            throw new SignError_1.SignError("Can't sign data with type \"" + this.type + "\" and version \"" + version + "\"", constants_1.ERRORS.VERSION_IS_NOT_SUPPORTED);
        }
        if (!prepareTx_1.SIGN_TYPES[forSign.type].getBytes[version]) {
            throw new SignError_1.SignError("Can't find prepare api for tx type \"" + forSign.type + "\" with version " + version + "!", constants_1.ERRORS.VERSION_IS_NOT_SUPPORTED);
        }
        this._signMethod = prepareTx_1.SIGN_TYPES[forSign.type].adapter;
        try {
            this._preparedData = prepareTx_1.prepare.signSchema(prepareMap)(this._forSign.data, true);
        }
        catch (e) {
            throw new SignError_1.SignError(e.message, constants_1.ERRORS.VALIDATION_FAILED);
        }
        this._bytePromise = this.getSignData()
            .then(function (signData) { return prepareTx_1.SIGN_TYPES[forSign.type].getBytes[version](signData); });
    }
    Signable.prototype.getOrderFee = function (config, minOrderFee, hasMatcherScript, smartAssetIdList) {
        return __awaiter(this, void 0, void 0, function () {
            var currentFee, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!(this._forSign.type === prepareTx_1.SIGN_TYPE.CREATE_ORDER)) return [3, 2];
                        currentFee = utils_1.currentCreateOrderFactory(config, minOrderFee);
                        _a = currentFee;
                        return [4, this.getDataForApi()];
                    case 1: return [2, _a.apply(void 0, [_b.sent(), hasMatcherScript, smartAssetIdList])];
                    case 2: return [2];
                }
            });
        });
    };
    Signable.prototype.getFee = function (config, hasScript, smartAssetIdList) {
        return __awaiter(this, void 0, void 0, function () {
            var currentFee, txData, bytes;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        currentFee = utils_1.currentFeeFactory(config);
                        return [4, this.getSignData()];
                    case 1:
                        txData = _a.sent();
                        return [4, this.getBytes()];
                    case 2:
                        bytes = _a.sent();
                        return [2, currentFee(txData, bytes, hasScript, smartAssetIdList)];
                }
            });
        });
    };
    Signable.prototype.getTxData = function () {
        return __assign({}, this._forSign.data);
    };
    Signable.prototype.getSignData = function () {
        return __awaiter(this, void 0, void 0, function () {
            var senderPublicKey, sender, dataForBytes, convert, signData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this._adapter.getPublicKey()];
                    case 1:
                        senderPublicKey = _a.sent();
                        return [4, this._adapter.getAddress()];
                    case 2:
                        sender = _a.sent();
                        dataForBytes = __assign({}, this._preparedData, { senderPublicKey: senderPublicKey,
                            sender: sender }, this._forSign.data, { type: this._forSign.type });
                        convert = prepareTx_1.SIGN_TYPES[this._forSign.type].toNode || null;
                        signData = convert && convert(dataForBytes, this._adapter.getNetworkByte());
                        return [2, signData || dataForBytes];
                }
            });
        });
    };
    Signable.prototype.getAssetIds = function () {
        return __awaiter(this, void 0, void 0, function () {
            var transaction, hash;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.getSignData()];
                    case 1:
                        transaction = _a.sent();
                        hash = Object.create(null);
                        hash[prepareTx_1.WAVES_ID] = true;
                        hash[utils_1.normalizeAssetId(transaction.feeAssetId)] = true;
                        switch (transaction.type) {
                            case prepareTx_1.SIGN_TYPE.CREATE_ORDER:
                                hash[utils_1.normalizeAssetId(transaction.matcherFeeAssetId)] = true;
                                hash[utils_1.normalizeAssetId(transaction.assetPair.amountAsset)] = true;
                                hash[utils_1.normalizeAssetId(transaction.assetPair.priceAsset)] = true;
                                break;
                            case prepareTx_2.TRANSACTION_TYPE_NUMBER.REISSUE:
                            case prepareTx_2.TRANSACTION_TYPE_NUMBER.BURN:
                            case prepareTx_2.TRANSACTION_TYPE_NUMBER.MASS_TRANSFER:
                            case prepareTx_2.TRANSACTION_TYPE_NUMBER.SPONSORSHIP:
                            case prepareTx_2.TRANSACTION_TYPE_NUMBER.TRANSFER:
                                hash[utils_1.normalizeAssetId(transaction.assetId)] = true;
                                break;
                            case prepareTx_2.TRANSACTION_TYPE_NUMBER.EXCHANGE:
                                hash[utils_1.normalizeAssetId(transaction.order1.assetPair.amountAsset)] = true;
                                hash[utils_1.normalizeAssetId(transaction.order1.assetPair.priceAsset)] = true;
                                hash[utils_1.normalizeAssetId(transaction.order1.matcherFeeAssetId)] = true;
                                hash[utils_1.normalizeAssetId(transaction.order2.matcherFeeAssetId)] = true;
                                break;
                            case prepareTx_2.TRANSACTION_TYPE_NUMBER.SCRIPT_INVOCATION:
                                transaction.payment.forEach(function (payment) {
                                    hash[utils_1.normalizeAssetId(payment.assetId)] = true;
                                });
                                break;
                        }
                        return [2, Object.keys(hash)];
                }
            });
        });
    };
    Signable.prototype.sign2fa = function (options) {
        var _this = this;
        var code = options.code;
        return this._adapter.getAddress()
            .then(function (address) {
            return options.request({
                address: address,
                code: code,
                signData: _this._forSign
            });
        })
            .then(function (signature) {
            _this._proofs.push(signature);
            return _this;
        });
    };
    Signable.prototype.addProof = function (signature) {
        if (this._proofs.indexOf(signature) !== -1) {
            this._proofs.push(signature);
        }
        return this;
    };
    Signable.prototype.getHash = function () {
        return this._bytePromise.then(function (bytes) { return base58Encode(blake2b(bytes)); });
    };
    Signable.prototype.getId = function () {
        return this._bytePromise.then(function (bytes) {
            var byteArr = Array.from(bytes);
            if (bytes[0] === 10) {
                bytes = new Uint8Array([byteArr[0]].concat(byteArr.slice(36, -16)));
            }
            return base58Encode(blake2b(bytes));
        });
    };
    Signable.prototype.sign = function () {
        var _this = this;
        this._makeSignPromise();
        return this._signPromise.then(function () { return _this; });
    };
    Signable.prototype.getSignature = function () {
        this._makeSignPromise();
        return this._signPromise;
    };
    Signable.prototype.getBytes = function () {
        return this._bytePromise;
    };
    Signable.prototype.getMyProofs = function () {
        var _this = this;
        return Promise.all([
            this.getBytes(),
            this._adapter.getPublicKey()
        ]).then(function (_a) {
            var bytes = _a[0], publicKey = _a[1];
            return _this._proofs.filter(function (signature) {
                try {
                    return verifySignature(publicKey, bytes, signature);
                }
                catch (e) {
                    return false;
                }
            });
        });
    };
    Signable.prototype.hasMySignature = function () {
        return this.getMyProofs().then(function (proofs) { return !!proofs.length; });
    };
    Signable.prototype.addMyProof = function () {
        var _this = this;
        return this.hasMySignature().then(function (hasMySignature) {
            if (!hasMySignature) {
                return _this.getSignature().then(function (signature) {
                    _this._proofs.push(signature);
                    return signature;
                });
            }
            else {
                return _this.getMyProofs().then(function (list) { return list[list.length - 1]; });
            }
        });
    };
    Signable.prototype.getDataForApi = function () {
        return __awaiter(this, void 0, void 0, function () {
            var data, proofs;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.getSignData()];
                    case 1:
                        data = _a.sent();
                        return [4, this.addMyProof()];
                    case 2:
                        _a.sent();
                        proofs = (this._proofs || []).slice();
                        try {
                            return [2, money_like_to_node_1.convert(__assign({}, data, { proofs: proofs }), function (item) { return new bignumber_1.BigNumber(item); })];
                        }
                        catch (e) {
                            return [2, __assign({}, data, { proofs: proofs, signature: proofs[0] })];
                        }
                        return [2];
                }
            });
        });
    };
    Signable.prototype._makeSignPromise = function () {
        var _this = this;
        if (!this._signPromise) {
            this._signPromise = this._bytePromise.then(function (bytes) {
                return _this._adapter[_this._signMethod](bytes, _this._getAmountPrecision(), _this._forSign);
            });
            this._signPromise.catch(function () {
                _this._signPromise = undefined;
            });
        }
        return this;
    };
    Signable.prototype._getAmountPrecision = function () {
        var data = this._forSign.data;
        return data.amount && data.amount.asset && data.amount.asset.precision ? data.amount.asset.precision : 0;
    };
    return Signable;
}());
exports.Signable = Signable;
//# sourceMappingURL=Signable.js.map