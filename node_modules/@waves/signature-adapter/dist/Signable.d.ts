import { SIGN_TYPE, TSignData } from './prepareTx';
import { IFeeConfig } from './utils';
import { Adapter } from './adapters';
import { BigNumber } from '@waves/bignumber';
export declare class Signable {
    readonly type: SIGN_TYPE;
    private readonly _forSign;
    private readonly _adapter;
    private readonly _bytePromise;
    private readonly _signMethod;
    private _signPromise;
    private _preparedData;
    private _proofs;
    constructor(forSign: TSignData, adapter: Adapter);
    getOrderFee(config: IFeeConfig, minOrderFee: BigNumber, hasMatcherScript: boolean, smartAssetIdList?: Array<string>): Promise<BigNumber | undefined>;
    getFee(config: IFeeConfig, hasScript: boolean, smartAssetIdList?: Array<string>): Promise<BigNumber>;
    getTxData(): TSignData['data'];
    getSignData(): Promise<any>;
    getAssetIds(): Promise<Array<string>>;
    sign2fa(options: ISign2faOptions): Promise<Signable>;
    addProof(signature: string): Signable;
    getHash(): Promise<string>;
    getId(): Promise<string>;
    sign(): Promise<Signable>;
    getSignature(): Promise<string>;
    getBytes(): Promise<Uint8Array>;
    getMyProofs(): Promise<Array<string>>;
    hasMySignature(): Promise<boolean>;
    addMyProof(): Promise<string>;
    getDataForApi(): Promise<any>;
    private _makeSignPromise;
    private _getAmountPrecision;
}
export interface ISign2faOptions {
    code: string;
    request(data: any): Promise<string>;
}
