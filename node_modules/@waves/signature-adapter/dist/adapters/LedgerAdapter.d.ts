import { Adapter } from './Adapter';
import { AdapterType } from '../config';
import { SIGN_TYPE } from '../prepareTx';
export declare class LedgerAdapter extends Adapter {
    private _currentUser;
    static type: AdapterType;
    private static _ledger;
    private static _hasConnectionPromise;
    constructor(user: any);
    isAvailable(): any;
    getPublicKey(): Promise<any>;
    getAddress(): Promise<any>;
    getSeed(): Promise<never>;
    getAdapterVersion(): any;
    signRequest(bytes: Uint8Array): Promise<string>;
    signTransaction(bytes: Uint8Array, amountPrecision: number): Promise<string>;
    signOrder(bytes: Uint8Array, amountPrecision: number): Promise<string>;
    signData(bytes: Uint8Array): Promise<string>;
    getPrivateKey(): Promise<never>;
    getSignVersions(): Record<SIGN_TYPE, Array<number>>;
    protected _isMyLedger(): any;
    static getUserList(from?: Number, to?: Number): any;
    static initOptions(options: IWavesLedger): void;
    static isAvailable(): any;
}
interface IWavesLedger {
    networkCode: number;
    debug?: boolean;
    openTimeout?: number;
    listenTimeout?: number;
    exchangeTimeout?: number;
    transport?: any;
}
export {};
