import { Adapter } from './Adapter';
import { AdapterType } from '../config';
import { SIGN_TYPE } from '../prepareTx';
export declare class WavesKeeperAdapter extends Adapter {
    static type: AdapterType;
    static adapter: WavesKeeperAdapter;
    private static _onUpdateCb;
    private _onDestoryCb;
    private _needDestroy;
    private _address;
    private _pKey;
    private static _txVersion;
    private static _getApiCb;
    private static _api;
    private handleUpdate;
    constructor({ address, publicKey }: any, networkCode?: number | string);
    isAvailable(ignoreLocked?: boolean): Promise<void>;
    isLocked(): Promise<void>;
    getSignVersions(): Record<SIGN_TYPE, Array<number>>;
    onDestroy(cb: any): any;
    getPublicKey(): Promise<string>;
    getAddress(): Promise<string>;
    getSeed(): Promise<never>;
    signRequest(bytes: Uint8Array, _?: any, signData?: any): Promise<string>;
    signTransaction(bytes: Uint8Array, amountPrecision: number, signData: any): Promise<string>;
    signOrder(bytes: Uint8Array, amountPrecision: number, signData: any): Promise<string>;
    signData(bytes: Uint8Array): Promise<string>;
    getPrivateKey(): Promise<never>;
    static isAvailable(networkCode?: number): Promise<boolean>;
    static getUserList(): Promise<any[]>;
    static initOptions(options: any): void;
    static setApiExtension(extension: any): void;
    static onUpdate(cb: any): void;
    static offUpdate(func: any): void;
    private static _updateState;
    private static _initExtension;
    private static _serializedData;
}
