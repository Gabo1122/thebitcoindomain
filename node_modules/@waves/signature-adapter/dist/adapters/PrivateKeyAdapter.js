"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Adapter_1 = require("./Adapter");
var waves_transactions_1 = require("@waves/waves-transactions");
var prepareTx_1 = require("../prepareTx");
var publicKey = waves_transactions_1.libs.crypto.publicKey;
var address = waves_transactions_1.libs.crypto.address;
var signWithPrivateKey = waves_transactions_1.libs.crypto.signBytes;
var PrivateKeyAdapter = (function (_super) {
    __extends(PrivateKeyAdapter, _super);
    function PrivateKeyAdapter(data, networkCode) {
        var _this = _super.call(this, networkCode) || this;
        _this.privateKey = '';
        _this.address = '';
        _this.publicKey = '';
        if (typeof data === 'string') {
            _this.privateKey = data;
        }
        else {
            var user = data;
            var encryptionRounds = user.encryptionRounds;
            _this.privateKey = waves_transactions_1.seedUtils.Seed.decryptSeedPhrase(user.encryptedPrivateKey, user.password, encryptionRounds);
        }
        _this.publicKey = publicKey({ privateKey: _this.privateKey });
        _this.address = address({ publicKey: _this.publicKey }, _this._code);
        return _this;
    }
    PrivateKeyAdapter.prototype.getSignVersions = function () {
        var _a;
        return _a = {},
            _a[prepareTx_1.SIGN_TYPE.AUTH] = [1],
            _a[prepareTx_1.SIGN_TYPE.MATCHER_ORDERS] = [1],
            _a[prepareTx_1.SIGN_TYPE.CREATE_ORDER] = [1, 2, 3],
            _a[prepareTx_1.SIGN_TYPE.CANCEL_ORDER] = [0, 1],
            _a[prepareTx_1.SIGN_TYPE.COINOMAT_CONFIRMATION] = [1],
            _a[prepareTx_1.SIGN_TYPE.ISSUE] = [2],
            _a[prepareTx_1.SIGN_TYPE.TRANSFER] = [2],
            _a[prepareTx_1.SIGN_TYPE.REISSUE] = [2],
            _a[prepareTx_1.SIGN_TYPE.BURN] = [2],
            _a[prepareTx_1.SIGN_TYPE.EXCHANGE] = [0, 2],
            _a[prepareTx_1.SIGN_TYPE.LEASE] = [2],
            _a[prepareTx_1.SIGN_TYPE.CANCEL_LEASING] = [2],
            _a[prepareTx_1.SIGN_TYPE.CREATE_ALIAS] = [2],
            _a[prepareTx_1.SIGN_TYPE.MASS_TRANSFER] = [1],
            _a[prepareTx_1.SIGN_TYPE.DATA] = [1],
            _a[prepareTx_1.SIGN_TYPE.SET_SCRIPT] = [1],
            _a[prepareTx_1.SIGN_TYPE.SPONSORSHIP] = [1],
            _a[prepareTx_1.SIGN_TYPE.SET_ASSET_SCRIPT] = [1],
            _a[prepareTx_1.SIGN_TYPE.SCRIPT_INVOCATION] = [1],
            _a;
    };
    PrivateKeyAdapter.prototype.getSeed = function () {
        return Promise.reject(Error('Method "getSeed" is not available!'));
    };
    PrivateKeyAdapter.prototype.getPublicKey = function () {
        return Promise.resolve(this.publicKey);
    };
    PrivateKeyAdapter.prototype.getPrivateKey = function () {
        return Promise.resolve(this.privateKey);
    };
    PrivateKeyAdapter.prototype.getAddress = function () {
        return Promise.resolve(this.address);
    };
    PrivateKeyAdapter.prototype.signRequest = function (bytes) {
        return this._sign(bytes);
    };
    PrivateKeyAdapter.prototype.signTransaction = function (bytes, amountPrecision) {
        return this._sign(bytes);
    };
    PrivateKeyAdapter.prototype.signOrder = function (bytes, amountPrecision) {
        return this._sign(bytes);
    };
    PrivateKeyAdapter.prototype.signData = function (bytes) {
        return this._sign(bytes);
    };
    PrivateKeyAdapter.prototype._sign = function (bytes) {
        return Promise.resolve(signWithPrivateKey({ privateKey: this.privateKey }, bytes));
    };
    PrivateKeyAdapter.isAvailable = function () {
        return Promise.resolve(true);
    };
    PrivateKeyAdapter.type = "privateKey";
    return PrivateKeyAdapter;
}(Adapter_1.Adapter));
exports.PrivateKeyAdapter = PrivateKeyAdapter;
//# sourceMappingURL=PrivateKeyAdapter.js.map