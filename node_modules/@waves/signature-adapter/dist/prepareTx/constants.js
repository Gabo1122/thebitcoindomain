"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var _a;
var waves_transactions_1 = require("@waves/waves-transactions");
var wavesTransactions = require("@waves/waves-transactions");
var money_like_to_node_1 = require("@waves/money-like-to-node");
var prepare_1 = require("./prepare");
var processors = prepare_1.prepare.processors;
var data_entities_1 = require("@waves/data-entities");
var _b = waves_transactions_1.libs.marshall.serializePrimitives, LEN = _b.LEN, SHORT = _b.SHORT, STRING = _b.STRING, LONG = _b.LONG, BASE58_STRING = _b.BASE58_STRING;
var binary = waves_transactions_1.libs.marshall.binary;
var toNode = function (data, convert) {
    var r = money_like_to_node_1.toNode(data);
    r.timestamp = (new Date(r.timestamp)).getTime();
    return convert ? convert(r) : r;
};
var processScript = function (srcScript) {
    var scriptText = (srcScript || '').replace('base64:', '');
    return scriptText ? "base64:" + scriptText : null;
};
var TRANSACTION_TYPE_NUMBER;
(function (TRANSACTION_TYPE_NUMBER) {
    TRANSACTION_TYPE_NUMBER[TRANSACTION_TYPE_NUMBER["SEND_OLD"] = 2] = "SEND_OLD";
    TRANSACTION_TYPE_NUMBER[TRANSACTION_TYPE_NUMBER["ISSUE"] = 3] = "ISSUE";
    TRANSACTION_TYPE_NUMBER[TRANSACTION_TYPE_NUMBER["TRANSFER"] = 4] = "TRANSFER";
    TRANSACTION_TYPE_NUMBER[TRANSACTION_TYPE_NUMBER["REISSUE"] = 5] = "REISSUE";
    TRANSACTION_TYPE_NUMBER[TRANSACTION_TYPE_NUMBER["BURN"] = 6] = "BURN";
    TRANSACTION_TYPE_NUMBER[TRANSACTION_TYPE_NUMBER["EXCHANGE"] = 7] = "EXCHANGE";
    TRANSACTION_TYPE_NUMBER[TRANSACTION_TYPE_NUMBER["LEASE"] = 8] = "LEASE";
    TRANSACTION_TYPE_NUMBER[TRANSACTION_TYPE_NUMBER["CANCEL_LEASING"] = 9] = "CANCEL_LEASING";
    TRANSACTION_TYPE_NUMBER[TRANSACTION_TYPE_NUMBER["CREATE_ALIAS"] = 10] = "CREATE_ALIAS";
    TRANSACTION_TYPE_NUMBER[TRANSACTION_TYPE_NUMBER["MASS_TRANSFER"] = 11] = "MASS_TRANSFER";
    TRANSACTION_TYPE_NUMBER[TRANSACTION_TYPE_NUMBER["DATA"] = 12] = "DATA";
    TRANSACTION_TYPE_NUMBER[TRANSACTION_TYPE_NUMBER["SET_SCRIPT"] = 13] = "SET_SCRIPT";
    TRANSACTION_TYPE_NUMBER[TRANSACTION_TYPE_NUMBER["SPONSORSHIP"] = 14] = "SPONSORSHIP";
    TRANSACTION_TYPE_NUMBER[TRANSACTION_TYPE_NUMBER["SET_ASSET_SCRIPT"] = 15] = "SET_ASSET_SCRIPT";
    TRANSACTION_TYPE_NUMBER[TRANSACTION_TYPE_NUMBER["SCRIPT_INVOCATION"] = 16] = "SCRIPT_INVOCATION";
})(TRANSACTION_TYPE_NUMBER = exports.TRANSACTION_TYPE_NUMBER || (exports.TRANSACTION_TYPE_NUMBER = {}));
var SIGN_TYPE;
(function (SIGN_TYPE) {
    SIGN_TYPE[SIGN_TYPE["AUTH"] = 1000] = "AUTH";
    SIGN_TYPE[SIGN_TYPE["MATCHER_ORDERS"] = 1001] = "MATCHER_ORDERS";
    SIGN_TYPE[SIGN_TYPE["CREATE_ORDER"] = 1002] = "CREATE_ORDER";
    SIGN_TYPE[SIGN_TYPE["CANCEL_ORDER"] = 1003] = "CANCEL_ORDER";
    SIGN_TYPE[SIGN_TYPE["COINOMAT_CONFIRMATION"] = 1004] = "COINOMAT_CONFIRMATION";
    SIGN_TYPE[SIGN_TYPE["ISSUE"] = 3] = "ISSUE";
    SIGN_TYPE[SIGN_TYPE["TRANSFER"] = 4] = "TRANSFER";
    SIGN_TYPE[SIGN_TYPE["REISSUE"] = 5] = "REISSUE";
    SIGN_TYPE[SIGN_TYPE["BURN"] = 6] = "BURN";
    SIGN_TYPE[SIGN_TYPE["EXCHANGE"] = 7] = "EXCHANGE";
    SIGN_TYPE[SIGN_TYPE["LEASE"] = 8] = "LEASE";
    SIGN_TYPE[SIGN_TYPE["CANCEL_LEASING"] = 9] = "CANCEL_LEASING";
    SIGN_TYPE[SIGN_TYPE["CREATE_ALIAS"] = 10] = "CREATE_ALIAS";
    SIGN_TYPE[SIGN_TYPE["MASS_TRANSFER"] = 11] = "MASS_TRANSFER";
    SIGN_TYPE[SIGN_TYPE["DATA"] = 12] = "DATA";
    SIGN_TYPE[SIGN_TYPE["SET_SCRIPT"] = 13] = "SET_SCRIPT";
    SIGN_TYPE[SIGN_TYPE["SPONSORSHIP"] = 14] = "SPONSORSHIP";
    SIGN_TYPE[SIGN_TYPE["SET_ASSET_SCRIPT"] = 15] = "SET_ASSET_SCRIPT";
    SIGN_TYPE[SIGN_TYPE["SCRIPT_INVOCATION"] = 16] = "SCRIPT_INVOCATION";
})(SIGN_TYPE = exports.SIGN_TYPE || (exports.SIGN_TYPE = {}));
var getCancelOrderBytes = function (txData) {
    var orderId = txData.orderId, id = txData.id, senderPublicKey = txData.senderPublicKey, sender = txData.sender;
    var pBytes = BASE58_STRING(senderPublicKey || sender);
    var orderIdBytes = BASE58_STRING(id || orderId);
    return Uint8Array.from(Array.from(pBytes).concat(Array.from(orderIdBytes)));
};
exports.SIGN_TYPES = (_a = {},
    _a[SIGN_TYPE.AUTH] = {
        getBytes: {
            1: function (txData) {
                var host = txData.host, data = txData.data;
                var pBytes = LEN(SHORT)(STRING)('WavesWalletAuthentication');
                var hostBytes = LEN(SHORT)(STRING)(host || '');
                var dataBytes = LEN(SHORT)(STRING)(data || '');
                return Uint8Array.from(Array.from(pBytes).concat(Array.from(hostBytes), Array.from(dataBytes)));
            },
        },
        adapter: 'signRequest'
    },
    _a[SIGN_TYPE.COINOMAT_CONFIRMATION] = {
        getBytes: {
            1: function (txData) {
                var timestamp = txData.timestamp, prefix = txData.prefix;
                var pBytes = LEN(SHORT)(STRING)(prefix);
                var timestampBytes = LONG(timestamp);
                return Uint8Array.from(Array.from(pBytes).concat(Array.from(timestampBytes)));
            },
        },
        adapter: 'signRequest'
    },
    _a[SIGN_TYPE.MATCHER_ORDERS] = {
        getBytes: {
            1: function (txData) {
                var timestamp = txData.timestamp, senderPublicKey = txData.senderPublicKey;
                var pBytes = BASE58_STRING(senderPublicKey);
                var timestampBytes = LONG(timestamp);
                return Uint8Array.from(Array.from(pBytes).concat(Array.from(timestampBytes)));
            },
        },
        adapter: 'signRequest'
    },
    _a[SIGN_TYPE.CREATE_ORDER] = {
        getBytes: {
            0: binary.serializeOrder,
            1: binary.serializeOrder,
            2: binary.serializeOrder,
            3: binary.serializeOrder,
        },
        toNode: function (data) {
            var price = processors.toOrderPrice(data);
            data = __assign({}, data, { price: data_entities_1.Money.fromCoins(price, data.price.asset) });
            return toNode(data, wavesTransactions.order);
        },
        adapter: 'signOrder'
    },
    _a[SIGN_TYPE.CANCEL_ORDER] = {
        getBytes: {
            0: getCancelOrderBytes,
            1: getCancelOrderBytes,
        },
        adapter: 'signRequest',
        toNode: function (data) { return ({
            orderId: data.orderId,
            sender: data.senderPublicKey,
            senderPublicKey: data.senderPublicKey,
            signature: data.proofs && data.proofs[0]
        }); },
    },
    _a[SIGN_TYPE.TRANSFER] = {
        getBytes: {
            2: binary.serializeTx,
        },
        toNode: function (data, networkByte) { return (toNode(__assign({}, data, { recipient: processors.recipient(String.fromCharCode(networkByte))(data.recipient), attachment: processors.attachment(data.attachment) }), wavesTransactions.transfer)); },
        adapter: 'signTransaction'
    },
    _a[SIGN_TYPE.ISSUE] = {
        getBytes: {
            2: binary.serializeTx,
        },
        toNode: function (data) { return toNode(__assign({}, data, { quantity: data.amount || data.quantity, script: processScript(data.script) }), wavesTransactions.issue); },
        adapter: 'signTransaction'
    },
    _a[SIGN_TYPE.REISSUE] = {
        getBytes: {
            2: binary.serializeTx,
        },
        toNode: function (data) {
            var quantity = data.amount || data.quantity;
            return toNode(__assign({}, data, { quantity: quantity }), wavesTransactions.reissue);
        },
        adapter: 'signTransaction'
    },
    _a[SIGN_TYPE.BURN] = {
        getBytes: {
            2: binary.serializeTx,
        },
        toNode: function (data) {
            var quantity = data.amount || data.quantity;
            return toNode(__assign({}, data, { quantity: quantity }), wavesTransactions.burn);
        },
        adapter: 'signTransaction'
    },
    _a[SIGN_TYPE.EXCHANGE] = {
        getBytes: {
            0: binary.serializeTx,
            2: binary.serializeTx,
        },
        toNode: function (data) {
            var tx = toNode(data);
            var order1Sign = data.buyOrder.signature || data.buyOrder.proofs[0];
            var order1proofs = data.buyOrder.proofs ? data.buyOrder.proofs : data.buyOrder.signature;
            var order1 = __assign({}, tx.buyOrder, { signature: order1Sign, proofs: order1proofs });
            var order2Sign = data.sellOrder.signature || data.sellOrder.proofs[0];
            var order2proofs = data.sellOrder.proofs ? data.sellOrder.proofs : data.sellOrder.signature;
            var order2 = __assign({}, tx.sellOrder, { signature: order2Sign, proofs: order2proofs });
            return wavesTransactions.exchange(__assign({}, tx, { order1: order1, order2: order2 }));
        },
        adapter: 'signTransaction'
    },
    _a[SIGN_TYPE.LEASE] = {
        getBytes: {
            2: binary.serializeTx,
        },
        toNode: function (data, networkByte) { return (toNode(__assign({}, data, { recipient: processors.recipient(String.fromCharCode(networkByte))(data.recipient) }), wavesTransactions.lease)); },
        adapter: 'signTransaction'
    },
    _a[SIGN_TYPE.CANCEL_LEASING] = {
        getBytes: {
            2: binary.serializeTx,
        },
        toNode: function (data) { return toNode(data, wavesTransactions.cancelLease); },
        adapter: 'signTransaction'
    },
    _a[SIGN_TYPE.CREATE_ALIAS] = {
        getBytes: {
            2: binary.serializeTx,
        },
        toNode: function (data) { return (__assign({}, toNode(data, wavesTransactions.alias), { chainId: data.chainId })); },
        adapter: 'signTransaction'
    },
    _a[SIGN_TYPE.MASS_TRANSFER] = {
        getBytes: {
            0: binary.serializeTx,
            1: binary.serializeTx,
        },
        toNode: function (data, networkByte) { return (toNode(__assign({}, data, { assetId: data.assetId || data.transfers[0].amount.asset.id, transfers: (data.transfers).map(function (item) {
                var recipient = processors.recipient(String.fromCharCode(networkByte))(item.name || item.recipient);
                return __assign({}, item, { recipient: recipient });
            }), attachment: processors.attachment(data.attachment) }), wavesTransactions.massTransfer)); },
        adapter: 'signTransaction'
    },
    _a[SIGN_TYPE.DATA] = {
        getBytes: {
            0: binary.serializeTx,
            1: binary.serializeTx,
        },
        toNode: function (data) { return toNode(data, wavesTransactions.data); },
        adapter: 'signTransaction'
    },
    _a[SIGN_TYPE.SET_SCRIPT] = {
        getBytes: {
            0: binary.serializeTx,
            1: binary.serializeTx,
        },
        toNode: function (data) { return toNode(__assign({}, data, { script: processScript(data.script) }), wavesTransactions.setScript); },
        adapter: 'signTransaction'
    },
    _a[SIGN_TYPE.SPONSORSHIP] = {
        getBytes: {
            0: binary.serializeTx,
            1: binary.serializeTx,
        },
        toNode: function (data) { return toNode(data, wavesTransactions.sponsorship); },
        adapter: 'signTransaction'
    },
    _a[SIGN_TYPE.SET_ASSET_SCRIPT] = {
        getBytes: {
            0: binary.serializeTx,
            1: binary.serializeTx,
        },
        toNode: function (data) { return toNode(__assign({}, data, { script: processScript(data.script) }), wavesTransactions.setAssetScript); },
        adapter: 'signTransaction'
    },
    _a[SIGN_TYPE.SCRIPT_INVOCATION] = {
        getBytes: {
            0: binary.serializeTx,
            1: binary.serializeTx,
        },
        toNode: function (data, networkByte) { return (toNode(__assign({}, data, { dApp: processors.recipient(String.fromCharCode(networkByte))(data.dApp) }), wavesTransactions.invokeScript)); },
        adapter: 'signTransaction'
    },
    _a);
//# sourceMappingURL=constants.js.map