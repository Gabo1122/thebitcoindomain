import { Money } from '@waves/data-entities';
import { BigNumber } from '@waves/bignumber';
export declare const WAVES_ID = "WAVES";
interface ICall {
    function: string;
    args?: Array<any>;
}
export declare module prepare {
    module processors {
        function callFunc(callData?: ICall | null): ICall | null;
        function payments(payments: Array<Money>): {
            amount: string;
            assetId: string;
        }[];
        function paymentsToNode(payments: Array<Money>): {
            amount: BigNumber;
            assetId: string | null;
        }[];
        function scriptProcessor(code: string): string | null;
        function assetPair(data: any): {
            amountAsset: any;
            priceAsset: any;
        };
        function signatureFromProof(proofs: any): any;
        function toBigNumber(some: string | number | BigNumber | Money): BigNumber;
        function toNumberString(some: any): string;
        function toSponsorshipFee(moeny: Money): BigNumber;
        function moneyToAssetId(money: Money): string;
        function moneyToNodeAssetId(money: Money): string;
        function timestamp(time: string | number | Date): string | number;
        function orString(data: any | string): string;
        function noProcess<T>(data: T): T;
        const recipient: (networkByte: any) => (data: any) => any;
        function attachment(data: string | Array<number> | Uint8Array): string;
        function addValue(value: any): any;
        function expiration(date?: any): any;
        function transfers(recipient: any, amount: any): (transfers: any) => any;
        function quantity(data: any): BigNumber;
        function base64(str: any): string;
        function toOrderPrice(order: any): BigNumber;
    }
    function wrap(from: string | null, to: string, cb: any): IWrappedFunction;
    interface IWrappedFunction {
        from: string;
        to: string;
        cb: Function;
    }
    function schema(...args: Array<IWrappedFunction | string>): (data: any) => any;
    function signSchema(args: Array<{
        name: any;
        field: any;
        processor: any;
        optional: any;
        type: any;
        optionalData: any;
    }>): (data: any, validate?: boolean) => any;
    function idToNode(id: string): string;
}
export {};
