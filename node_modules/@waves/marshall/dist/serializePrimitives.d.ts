declare type Option<T> = T | null | undefined;
export declare type TSerializer<T> = (value: T) => Uint8Array;
export declare const empty: Uint8Array;
export declare const zero: Uint8Array;
export declare const one: Uint8Array;
export declare const BASE58_STRING: TSerializer<string>;
export declare const BASE64_STRING: TSerializer<string>;
export declare const STRING: TSerializer<Option<string>>;
export declare const BYTE: TSerializer<number>;
export declare const BOOL: TSerializer<boolean>;
export declare const BYTES: TSerializer<Uint8Array | number[]>;
export declare const SHORT: TSerializer<number>;
export declare const INT: TSerializer<number>;
export declare const OPTION: <T, R = T | null | undefined>(s: TSerializer<T>) => TSerializer<R>;
export declare const LEN: (lenSerializer: TSerializer<number>) => <T>(valueSerializer: TSerializer<T>) => TSerializer<T>;
export declare const COUNT: (countSerializer: TSerializer<number>) => <T>(itemSerializer: TSerializer<T>) => (items: T[]) => Uint8Array;
export declare const LONG: TSerializer<number | string>;
export declare const SCRIPT: TSerializer<string | null>;
export declare const ALIAS: TSerializer<string>;
export declare const ADDRESS_OR_ALIAS: TSerializer<string>;
export {};
