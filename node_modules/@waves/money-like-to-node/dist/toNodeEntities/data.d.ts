import { TYPES } from '../constants';
import { DATA_FIELD_TYPE, IDataTransaction } from '@waves/ts-types';
import { TLong, TWithPartialFee } from '../types';
import { IDefaultGuiTx } from './general';
export declare const data: (data: IWavesGuiData) => TWithPartialFee<IDataTransaction<string>>;
export interface IWavesGuiData extends IDefaultGuiTx<typeof TYPES.DATA> {
    data: Array<TWavesGuiDataTransactionEntry>;
}
declare type TWavesGuiDataTransactionEntry = IWavesGuiDataTransactionEntryInteger | IWavesGuiDataTransactionEntryBoolean | IWavesGuiDataTransactionEntryString | IWavesGuiDataTransactionEntryBinary;
interface IWavesGuiDataTransactionEntryInteger {
    key: string;
    type: typeof DATA_FIELD_TYPE.INTEGER;
    value: TLong;
}
interface IWavesGuiDataTransactionEntryBoolean {
    key: string;
    type: typeof DATA_FIELD_TYPE.BOOLEAN;
    value: boolean;
}
interface IWavesGuiDataTransactionEntryString {
    key: string;
    type: typeof DATA_FIELD_TYPE.STRING;
    value: string;
}
interface IWavesGuiDataTransactionEntryBinary {
    key: string;
    type: typeof DATA_FIELD_TYPE.BINARY;
    value: string;
}
export {};
