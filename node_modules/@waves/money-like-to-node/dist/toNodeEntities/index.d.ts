import { IWavesGuiAlias } from './alias';
import { TWavesGuiBurn } from './burn';
import { IWavesGuiCancelLease } from './cancelLease';
import { IWavesGuiData } from './data';
import { IWavesGuiExchangeOrder, IWavesGuiExchange } from './exchange';
import { IWavesGuiIssue } from './issue';
import { TWavesGuiReissue } from './reissue';
import { IWavesGuiLease } from './lease';
import { TWavesGuiMassTransfer } from './massTransfer';
import { IWavesGuiSetAssetScript } from './setAssetScript';
import { IWavesGuiSetScript } from './setScript';
import { IWavesGuiSponsorship } from './sponsorship';
import { IWavesGuiTransfer } from './transfer';
import { IExchangeTransactionOrderWithProofs, TTransactionMap } from '@waves/ts-types';
import { TWithPartialFee } from '../types';
import { IWavesGuiInvokeScript } from './invokeScript';
export declare const node: {
    alias: (data: IWavesGuiAlias) => import("@waves/ts-types").IAliasTransaction<string>;
    burn: (data: TWavesGuiBurn) => TWithPartialFee<import("@waves/ts-types").IBurnTransaction<string>>;
    cancelLease: (data: IWavesGuiCancelLease) => TWithPartialFee<import("@waves/ts-types").ICancelLeaseTransaction<string>>;
    data: (data: IWavesGuiData) => TWithPartialFee<import("@waves/ts-types").IDataTransaction<string>>;
    exchange: (data: IWavesGuiExchange) => TWithPartialFee<import("@waves/ts-types").IExchangeTransaction<string>>;
    issue: (data: IWavesGuiIssue) => TWithPartialFee<import("@waves/ts-types").IIssueTransaction<string>>;
    reissue: (data: TWavesGuiReissue) => TWithPartialFee<import("@waves/ts-types").IReissueTransaction<string>>;
    lease: (data: IWavesGuiLease) => TWithPartialFee<import("@waves/ts-types").ILeaseTransaction<string>>;
    massTransfer: (data: TWavesGuiMassTransfer) => TWithPartialFee<import("@waves/ts-types").IMassTransferTransaction<string>>;
    setAssetScript: (data: IWavesGuiSetAssetScript) => TWithPartialFee<import("@waves/ts-types").ISetAssetScriptTransaction<string>>;
    setScript: (data: IWavesGuiSetScript) => TWithPartialFee<import("@waves/ts-types").ISetScriptTransaction<string>>;
    sponsorship: (data: IWavesGuiSponsorship) => TWithPartialFee<import("@waves/ts-types").ISponsorshipTransaction<string>>;
    transfer: (data: IWavesGuiTransfer) => TWithPartialFee<import("@waves/ts-types").ITransferTransaction<string>>;
    order: (data: IWavesGuiExchangeOrder) => IExchangeTransactionOrderWithProofs<string>;
    invokeScript: (data: IWavesGuiInvokeScript) => TWithPartialFee<import("@waves/ts-types").IInvokeScriptTransaction<string>>;
};
export { IWavesGuiAlias, TWavesGuiBurn, IWavesGuiCancelLease, IWavesGuiData, IWavesGuiExchange, IWavesGuiIssue, TWavesGuiReissue, IWavesGuiLease, TWavesGuiMassTransfer, IWavesGuiSetAssetScript, IWavesGuiSetScript, IWavesGuiSponsorship, IWavesGuiTransfer, };
export declare function toNode(item: IWavesGuiExchangeOrder): IExchangeTransactionOrderWithProofs<string>;
export declare function toNode<TX extends TWavesGuiEntity, TYPE extends TX['type'] = TX['type']>(item: TX): TWithPartialFee<TTransactionMap<string>[TYPE]>;
export declare type TWavesGuiEntity = IWavesGuiAlias | TWavesGuiBurn | IWavesGuiCancelLease | IWavesGuiData | IWavesGuiExchange | IWavesGuiIssue | TWavesGuiReissue | IWavesGuiLease | TWavesGuiMassTransfer | IWavesGuiSetAssetScript | IWavesGuiSetScript | IWavesGuiSponsorship | IWavesGuiTransfer | IWavesGuiInvokeScript;
