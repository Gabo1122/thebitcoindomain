"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("../constants");
var utils_1 = require("../utils");
var defaultConvert = function (data, factory) {
    return Object.assign({}, data, { fee: factory(data.fee) });
};
exports.issue = function (tx, factory) { return (__assign({}, defaultConvert(tx, factory), { quantity: factory(tx.quantity) })); };
exports.transfer = function (tx, factory) { return (__assign({}, defaultConvert(tx, factory), { amount: factory(tx.amount) })); };
exports.reissue = function (tx, factory) { return (__assign({}, defaultConvert(tx, factory), { quantity: factory(tx.quantity) })); };
exports.burn = function (tx, factory) { return (__assign({}, defaultConvert(tx, factory), { quantity: factory(tx.quantity) })); };
exports.order = function (data, factory) { return (__assign({}, data, { price: factory(data.price), amount: factory(data.amount), matcherFee: factory(data.matcherFee) })); };
exports.exchange = function (tx, factory) { return (__assign({}, defaultConvert(tx, factory), { buyOrder: exports.order(tx.buyOrder, factory), sellOrder: exports.order(tx.sellOrder, factory), amount: factory(tx.amount), price: factory(tx.price), sellMatcherFee: factory(tx.sellMatcherFee), buyMatcherFee: factory(tx.buyMatcherFee) })); };
exports.lease = function (tx, factory) { return (__assign({}, defaultConvert(tx, factory), { amount: factory(tx.amount) })); };
exports.cancelLease = function (tx, factory) { return defaultConvert(tx, factory); };
exports.alias = function (tx, factory) { return defaultConvert(tx, factory); };
exports.massTransfer = function (tx, factory) { return (__assign({}, defaultConvert(tx, factory), { transfers: tx.transfers.map(function (item) { return (__assign({}, item, { amount: factory(item.amount) })); }) })); };
exports.data = function (tx, factory) { return (__assign({}, defaultConvert(tx, factory), { data: tx.data.map(function (item) {
        switch (item.type) {
            case 'integer':
                return __assign({}, item, { value: factory(item.value) });
            default:
                return item;
        }
    }) })); };
exports.setScript = function (tx, factory) { return defaultConvert(tx, factory); };
exports.sponsorship = function (tx, factory) { return (__assign({}, defaultConvert(tx, factory), { minSponsoredAssetFee: factory(tx.minSponsoredAssetFee) })); };
exports.invokeScript = function (tx, factory) { return (__assign({}, defaultConvert(tx, factory), { payment: tx.payment && tx.payment.map(function (item) { return (__assign({}, item, { amount: factory(item.amount) })); }), call: __assign({}, tx.call, { args: tx.call && tx.call.args.map(function (item) { return (__assign({}, item, { value: item.type === 'integer' ? factory(item.value) : item.value })); }) }) })); };
exports.setAssetScript = function (tx, factory) { return defaultConvert(tx, factory); };
function convert(tx, factory) {
    if (utils_1.isOrder(tx)) {
        return exports.order(tx, factory);
    }
    switch (tx.type) {
        case constants_1.TYPES.ISSUE:
            return exports.issue(tx, factory);
        case constants_1.TYPES.TRANSFER:
            return exports.transfer(tx, factory);
        case constants_1.TYPES.REISSUE:
            return exports.reissue(tx, factory);
        case constants_1.TYPES.BURN:
            return exports.burn(tx, factory);
        case constants_1.TYPES.EXCHANGE:
            return exports.exchange(tx, factory);
        case constants_1.TYPES.LEASE:
            return exports.lease(tx, factory);
        case constants_1.TYPES.CANCEL_LEASE:
            return exports.cancelLease(tx, factory);
        case constants_1.TYPES.ALIAS:
            return exports.alias(tx, factory);
        case constants_1.TYPES.MASS_TRANSFER:
            return exports.massTransfer(tx, factory);
        case constants_1.TYPES.DATA:
            return exports.data(tx, factory);
        case constants_1.TYPES.SET_SCRIPT:
            return exports.setScript(tx, factory);
        case constants_1.TYPES.SPONSORSHIP:
            return exports.sponsorship(tx, factory);
        case constants_1.TYPES.SET_ASSET_SCRIPT:
            return exports.setAssetScript(tx, factory);
        case constants_1.TYPES.INVOKE_SCRIPT:
            return exports.invokeScript(tx, factory);
        default:
            throw new Error('Unknown transaction type!');
    }
}
exports.convert = convert;
//# sourceMappingURL=index.js.map