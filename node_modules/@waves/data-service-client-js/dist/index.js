"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("./utils");
var transform_1 = require("./transform");
exports.defaultTransform = transform_1.default;
var getAssets_1 = require("./methods/getAssets");
var getAssetsByTicker_1 = require("./methods/getAssetsByTicker");
var getCandles_1 = require("./methods/getCandles");
var getPairs_1 = require("./methods/getPairs");
var getExchangeTxs_1 = require("./methods/getExchangeTxs");
var getTransferTxs_1 = require("./methods/getTransferTxs");
var getMassTransferTxs_1 = require("./methods/getMassTransferTxs");
var getAliases_1 = require("./methods/getAliases");
var DataServiceClient = /** @class */ (function () {
    function DataServiceClient(params) {
        var options = __assign({}, params);
        if (!options.rootUrl) {
            throw new Error('No rootUrl was presented in options object. Check constructor call.');
        }
        // Add defaults
        if (!options.transform) {
            options.transform = transform_1.default;
        }
        if (!options.fetch) {
            options.fetch = utils_1.defaultFetch;
        }
        if (!options.parse) {
            options.parse = utils_1.defaultParse;
        }
        // Create methods
        this.getAssets = getAssets_1.default(options);
        this.getAssetsByTicker = getAssetsByTicker_1.default(options);
        this.getCandles = getCandles_1.default(options);
        this.getPairs = getPairs_1.default(options);
        this.getExchangeTxs = getExchangeTxs_1.default(options);
        this.getTransferTxs = getTransferTxs_1.default(options);
        this.getMassTransferTxs = getMassTransferTxs_1.default(options);
        this.aliases = getAliases_1.default(options);
    }
    return DataServiceClient;
}());
exports.default = DataServiceClient;
__export(require("./types"));
