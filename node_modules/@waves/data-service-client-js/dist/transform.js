"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var data_entities_1 = require("@waves/data-entities");
var types_1 = require("./types");
var utils_1 = require("./utils");
var transformer = function (_a) {
    var __type = _a.__type, data = _a.data, rest = __rest(_a, ["__type", "data"]);
    switch (__type) {
        case types_1.ApiTypes.List:
            return data.map(transformer);
        case types_1.ApiTypes.Asset:
            return transformAsset(data);
        case types_1.ApiTypes.Alias:
            return data;
        case types_1.ApiTypes.Pair:
            return transformPair(data);
        case types_1.ApiTypes.Transaction:
            return data;
        case types_1.ApiTypes.Candle:
            return transformCandle(data);
        default:
            return __assign({ __type: __type, data: data }, rest);
    }
};
var transformAsset = function (data) {
    return data === null ? null : new data_entities_1.Asset(data);
};
var transformPair = utils_1.id;
var transformCandle = function (data) {
    return data === null ? null : new data_entities_1.Candle(data);
};
exports.default = transformer;
