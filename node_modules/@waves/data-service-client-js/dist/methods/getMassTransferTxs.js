"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var createMethod_1 = require("./createMethod");
var createRequest_1 = require("../createRequest");
// One
var validateId = function (id) {
    return typeof id === 'string' ? Promise.resolve(id) : Promise.reject('Wrong id');
};
var generateRequestOne = function (rootUrl) { return function (id) {
    return createRequest_1.createRequest(rootUrl + "/transactions/mass-transfer/" + id);
}; };
//Many
var isFilters = function (filters) {
    var possibleFilters = [
        'sender',
        'assetId',
        'recipient',
        'after',
        'timeStart',
        'timeEnd',
        'sort',
        'limit',
    ];
    return (typeof filters === 'object' &&
        Object.keys(filters).every(function (k) { return possibleFilters.includes(k); }));
};
var validateFilters = function (filters) {
    return isFilters(filters)
        ? Promise.resolve(filters)
        : Promise.reject('Wrong filters object');
};
var generateRequestMany = function (rootUrl) { return function (filters) {
    return createRequest_1.createRequest(rootUrl + "/transactions/mass-transfer", filters);
}; };
var createGetMassTransferTxs = function (libOptions) {
    var getMassTransferTxsOne = createMethod_1.createMethod({
        validate: validateId,
        generateRequest: generateRequestOne,
        libOptions: libOptions,
    });
    var getMassTransferTxsMany = createMethod_1.createMethod({
        validate: validateFilters,
        generateRequest: generateRequestMany,
        libOptions: libOptions,
        addPaginationToArgs: function (_a) {
            var filters = _a.args[0], cursor = _a.cursor, count = _a.count;
            return (__assign({}, filters, { after: cursor }, (count ? { limit: count } : {})));
        },
    });
    var getMassTransferTxs = function (idOrFilters) {
        if (idOrFilters === void 0) { idOrFilters = {}; }
        return typeof idOrFilters === 'string'
            ? getMassTransferTxsOne(idOrFilters)
            : getMassTransferTxsMany(idOrFilters);
    };
    return getMassTransferTxs;
};
exports.default = createGetMassTransferTxs;
