import { IWavesCrypto, TBinaryOut, TSeed, ISeedRelated, ISeedEmbeded } from './interface';
declare type TOutputTypesMap = {
    Bytes: Uint8Array;
    Base58: string;
};
declare type TDefaultOut = 'Base58';
declare type TOptions<T extends TBinaryOut = TDefaultOut, S extends TSeed | undefined = undefined> = {
    output?: T;
    seed?: S;
};
declare type TWavesCrypto<T extends TBinaryOut = TDefaultOut, S extends TSeed | undefined = undefined> = IWavesCrypto<T> & (S extends undefined ? ISeedRelated<T> : ISeedEmbeded<T>);
export declare const crypto: <TOut extends "Bytes" | "Base58" = "Base58", S extends string | Uint8Array | number[] | import("./interface").TRawStringInDiscriminator | import("./interface").INonceSeed | undefined = undefined>(options?: TOptions<TOut, S> | undefined) => TWavesCrypto<TOutputTypesMap[TOut], S>;
export {};
