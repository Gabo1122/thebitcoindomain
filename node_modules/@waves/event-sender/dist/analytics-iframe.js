(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
///<reference path="../interface.d.ts"/>
Object.defineProperty(exports, "__esModule", { value: true });
var waves_browser_bus_1 = require("@waves/waves-browser-bus");
var utils_1 = require("./utils");
waves_browser_bus_1.WindowAdapter.createSimpleWindowAdapter().then(function (adapter) {
    var bus = new waves_browser_bus_1.Bus(adapter);
    var adapters = [];
    var promise = null;
    bus.on('has-referrer', function (referrer) {
        Object.defineProperty(Document.prototype, 'referrer', {
            get: function () { return referrer; }
        });
    });
    bus.on('add-adapter', function (data) {
        if (utils_1.hasScript(data.libraryUrl)) {
            return void 0;
        }
        var load = utils_1.loadScript(data.libraryUrl)
            .then(function () {
            utils_1.runByPath(data.initializeMethod, [data.apiToken]);
            adapters.push({
                type: data.type,
                send: function (name, params) {
                    utils_1.runByPath(data.sendMethod, [name, params]);
                }
            });
        });
        promise = promise ? promise.then(function () { return load; }) : load;
        promise.finally(function () {
            promise = null;
        });
        return load;
    });
    bus.on('event', function (data) {
        if (!data.name) {
            throw new Error('Wrong format, has no event name!');
        }
        var type = data.target || 'all';
        var apply = function () {
            adapters
                .filter(function (item) { return type === 'all' ? true : item.type === type; })
                .forEach(function (item) { return item.send(data.name, data.params); });
        };
        if (promise) {
            promise.then(apply);
        }
        else {
            apply();
        }
    });
});

},{"./utils":2,"@waves/waves-browser-bus":undefined}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var onLoad = new Promise(function (resolve) { return document.addEventListener('DOMContentLoaded', resolve); });
function loadScript(url) {
    return onLoad.then(function () { return new Promise(function (resolve, reject) {
        var script = document.createElement('script');
        script.addEventListener('load', resolve);
        script.addEventListener('error', reject);
        script.src = url;
        document.head.appendChild(script);
    }); });
}
exports.loadScript = loadScript;
function hasScript(url) {
    return !!document.querySelector("script[src=\"" + url + "\"]");
}
exports.hasScript = hasScript;
function runByPath(path, args) {
    var obj = window;
    var parts = path.split('.');
    if (parts.length === 1) {
        return obj[path].apply(obj, args);
    }
    parts.slice(-1).forEach(function (part) {
        obj = obj[part];
    });
    obj[parts[parts.length - 1]].apply(obj, args);
}
exports.runByPath = runByPath;

},{}]},{},[1]);
