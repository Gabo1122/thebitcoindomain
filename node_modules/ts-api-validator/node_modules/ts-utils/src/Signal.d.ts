import { IReceiver } from './Receiver';
export declare class Signal<T> {
    cid: string;
    private _handlers;
    on<R>(handler: Signal.IHandler<T, R>, context?: R, receiver?: IReceiver): void;
    once<R>(handler: Signal.IHandler<T, R>, context?: R, receiver?: IReceiver): void;
    off(handler?: Signal.IHandler<T, any>): void;
    dispatch(some: T): void;
}
export declare module Signal {
    interface IHandler<T, R> {
        (this: R, data: T): any;
    }
    interface IHandlerData<T, R> {
        isOnce: boolean;
        handler: IHandler<T, R>;
        context: R;
        receiver: IReceiver;
    }
}
