import { Signal } from './Signal';
export declare type TStopArg1 = Signal<any> | Signal.IHandler<any, any>;
export declare class Receiver {
    private __received;
    receive<T, R>(signal: Signal<T>, handler: Signal.IHandler<T, R>, context?: R): void;
    receiveOnce<T, R>(signal: Signal<T>, handler: Signal.IHandler<T, R>, context?: R): void;
    stopReceive(item?: TStopArg1, handler?: Signal.IHandler<any, any>): void;
}
export interface IReceiver {
    receive<T, R>(signal: Signal<T>, handler: Signal.IHandler<T, R>, context?: R): void;
    receiveOnce<T, R>(signal: Signal<T>, handler: Signal.IHandler<T, R>, context?: R): void;
    stopReceive(item?: Signal<any>, handler?: Signal.IHandler<any, any>): void;
    stopReceive(item?: Signal.IHandler<any, any>): void;
}
