"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Iterator_1 = require("./Iterator");
var Path = (function () {
    function Path(path) {
        this._path = path;
        this.length = this._path.length;
    }
    Path.prototype.reverse = function () {
        return new Path(this._path.slice().reverse());
    };
    Path.prototype.iterator = function () {
        var _this = this;
        return new Iterator_1.Iterator(this._path.map(function (item, index) { return _this.getItemData(index); }));
    };
    Path.prototype.slice = function (start, end) {
        return new Path(this._path.slice(start, end));
    };
    Path.prototype.forEach = function (cb, context) {
        var _this = this;
        return this._path.forEach(function (item, index) {
            cb.call(context, _this.getItemData(index), index);
        });
    };
    Path.prototype.some = function (cb, context) {
        var _this = this;
        return this._path.some(function (item, index) {
            return cb.call(context, _this.getItemData(index), index);
        });
    };
    Path.prototype.toString = function () {
        return this._path.map(function (item, i) {
            switch (item.type) {
                case 0 /* Object */:
                    return i === 0 ? item.name : "." + item.name;
                case 1 /* Array */:
                    return "[" + item.name + "]";
            }
        }).join('');
    };
    Path.prototype.getItemData = function (index) {
        var container = Path.getContainer(this._path[index].type);
        var nextContainer = this._path[index + 1] && Path.getContainer(this._path[index + 1].type) || null;
        return { name: this._path[index].name, container: container, nextContainer: nextContainer };
    };
    Path.parse = function (path) {
        var parts = [];
        path.split('.').forEach(function (key) {
            if (key === '') {
                parts.push({
                    type: 0 /* Object */,
                    key: key
                });
            }
            else {
                var _a = key.replace(/\[(.*)?\]/, '|$1').split('|'), name_1 = _a[0], index = _a[1];
                if (name_1) {
                    var num = Number(name_1);
                    if (String(num) === name_1) {
                        parts.push({
                            type: 1 /* Array */,
                            name: name_1
                        });
                    }
                    else {
                        parts.push({
                            type: 0 /* Object */,
                            name: name_1
                        });
                    }
                }
                if (index) {
                    parts.push({
                        type: 1 /* Array */,
                        name: index
                    });
                }
            }
        });
        return new Path(parts);
    };
    Path.getContainer = function (type) {
        switch (type) {
            case 0 /* Object */:
                return Object.create(null);
            case 1 /* Array */:
                return [];
        }
    };
    return Path;
}());
exports.Path = Path;
//# sourceMappingURL=Path.js.map