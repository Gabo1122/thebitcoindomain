"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("./utils");
var EMPTY_FUNCS_MAP = {
    skipNumber: utils_1.isNumber,
    skipString: utils_1.isString,
    skipNotEmpty: utils_1.isNotEmpty,
    skipNull: utils_1.isNull,
    skipUndefined: utils_1.isUndefined
};
function not(processor) {
    if (processor) {
        return function (data) { return !processor(data); };
    }
    else {
        return function (data) { return !data; };
    }
}
exports.not = not;
function empty(options) {
    if (!options) {
        return Boolean;
    }
    var functions = [];
    utils_1.each(options, function (value, optionName) {
        if (EMPTY_FUNCS_MAP[optionName] && value) {
            functions.push(EMPTY_FUNCS_MAP[optionName]);
        }
    });
    if (!functions.length) {
        return Boolean;
    }
    else {
        return function (data) {
            return functions.some(function (f) { return f(data); }) || !!data;
        };
    }
}
exports.empty = empty;
function contains(data) {
    if (typeof data === 'object') {
        var keys_1 = Object.keys(data);
        return function (localData) {
            if (!utils_1.isObject(localData)) {
                return false;
            }
            return keys_1.every(function (key) { return data[key] === localData[key]; });
        };
    }
    else {
        return function (localData) {
            return data === localData;
        };
    }
}
exports.contains = contains;
function containsDeep(data) {
    var paths = utils_1.getPaths(data);
    var check = function (localData) {
        return paths.every(function (parts) {
            return utils_1.get(data, parts) === utils_1.get(localData, parts);
        });
    };
    return function (localData) {
        if (typeof localData === 'object') {
            return check(localData);
        }
        else {
            return false;
        }
    };
}
exports.containsDeep = containsDeep;
function notContains(data) {
    return not(contains(data));
}
exports.notContains = notContains;
function notContainsDeep(data) {
    return not(containsDeep(data));
}
exports.notContainsDeep = notContainsDeep;
function roundFilter(len) {
    return function (num) { return utils_1.round(num, len); };
}
exports.roundFilter = roundFilter;
function splitRangeFilter(data, processor) {
    return function (num) { return utils_1.splitRange(num, data, processor); };
}
exports.splitRangeFilter = splitRangeFilter;
function roundSplit(len, data) {
    return splitRangeFilter(data, roundFilter(len));
}
exports.roundSplit = roundSplit;
function equal(some, noStrict) {
    if (noStrict) {
        return function (data) {
            /* tslint:disable */
            return some == data;
            /* tslint:enable */
        };
    }
    return function (data) {
        return some === data;
    };
}
exports.equal = equal;
function notEqual(some, noStrict) {
    return not(equal(some, noStrict));
}
exports.notEqual = notEqual;
var dateParsers = [
    {
        pattern: 'YYYY',
        handler: function (localDate) { return String(localDate.getFullYear()); }
    },
    {
        pattern: 'YY',
        handler: function (localDate) { return String(localDate.getFullYear()).substr(2); }
    },
    {
        pattern: 'MM',
        handler: function (localDate) { return String(utils_1.numToLength(localDate.getMonth() + 1, 2)); }
    },
    {
        pattern: 'M',
        handler: function (localDate) { return String(localDate.getMonth() + 1); }
    },
    {
        pattern: 'DD',
        handler: function (localDate) { return String(utils_1.numToLength(localDate.getDate(), 2)); }
    },
    {
        pattern: 'D',
        handler: function (localDate) { return String(localDate.getDate()); }
    },
    {
        pattern: 'hh',
        handler: function (localDate) { return String(utils_1.numToLength(localDate.getHours(), 2)); }
    },
    {
        pattern: 'h',
        handler: function (localDate) { return String(localDate.getHours()); }
    },
    {
        pattern: 'mm',
        handler: function (localDate) { return String(utils_1.numToLength(localDate.getMinutes(), 2)); }
    },
    {
        pattern: 'm',
        handler: function (localDate) { return String(localDate.getMinutes()); }
    },
    {
        pattern: 'ss',
        handler: function (localDate) { return String(utils_1.numToLength(localDate.getSeconds(), 2)); }
    },
    {
        pattern: 's',
        handler: function (localDate) { return String(localDate.getSeconds()); }
    }
];
function date(pattern, processor) {
    var localPatterns = [];
    var forFind = pattern;
    var parse;
    dateParsers.forEach(function (datePattern) {
        if (forFind.indexOf(datePattern.pattern) !== -1) {
            forFind = forFind.replace(datePattern.pattern, '');
            localPatterns.push(datePattern);
        }
    });
    if (processor) {
        parse = function (toParse) {
            var result = processor(toParse);
            return utils_1.isNumber(result) ? new Date(result) : result;
        };
    }
    else {
        parse = function (data) {
            return utils_1.isNumber(data) ? new Date(data) : data;
        };
    }
    return function (localDate) {
        var _date = parse(localDate);
        return localPatterns.reduce(function (result, datePattern) {
            return result.replace(datePattern.pattern, datePattern.handler(_date));
        }, pattern);
    };
}
exports.date = date;
function getBinaryFilter(data) {
    var dataPaths = utils_1.getPaths(data);
    if (dataPaths.length === 1) {
        var path_1 = dataPaths[0];
        var value_1 = utils_1.get(data, path_1);
        return function (item) {
            var itemValue = utils_1.get(item, path_1);
            return itemValue > value_1 ? -1 : itemValue === value_1 ? 0 : 1;
        };
    }
    else {
        var pathsStr_1 = dataPaths.map(String);
        var pathsHash_1 = Object.create(null);
        dataPaths.forEach(function (path) {
            pathsHash_1[String(path)] = utils_1.get(data, path);
        });
        return function (item) {
            var map = dataPaths.map(function (path, i) {
                var itemValue = utils_1.get(item, path);
                var pathStr = pathsStr_1[i];
                return itemValue > pathsHash_1[pathStr] ? -1 : itemValue === pathsHash_1[pathStr] ? 0 : 1;
            });
            var witoutZero = map.filter(Boolean);
            if (witoutZero.length === 0) {
                return 0;
            }
            else {
                return witoutZero[0];
            }
        };
    }
}
exports.getBinaryFilter = getBinaryFilter;
//# sourceMappingURL=filters.js.map