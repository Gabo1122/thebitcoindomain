import { Path } from './Path';
import { IFilter } from './filters';
export declare let DEFAULT_NUMBER_SEPARATOR: string;
export declare function isObject(param: any): boolean;
export declare function isEmpty(param: any): boolean;
export declare function isNotEmpty(param: any): boolean;
export declare function isString(param: any): boolean;
export declare function isNumber(param: any): boolean;
export declare function isArray(param: any): boolean;
export declare function isBoolean(param: any): boolean;
export declare function isNull(param: any): boolean;
export declare function isUndefined(param: any): boolean;
export declare function isNaNCheck(param: any): boolean;
export declare function isFunction(param: any): boolean;
export declare function typeOf(param: any): TTypes;
export declare function numToLength(num: number, length: number): string;
export declare function round(num: number, len?: number): number;
export declare function splitRange(num: number, options?: ISplitRangeOptions, processor?: IFilter<any, number>): string;
export declare function each<T>(param: Array<T> | IHash<T>, callback: (data: T, key: string | number) => any, context?: any): void;
export declare function some<T>(param: Object, callback: ISomeCallback<T>): boolean;
export declare function get<T>(data: object, path: string | Path): T;
export declare function set(data: object, path: string | Path, value: any): void;
export declare function getLayers(data: object, path: string | Path): Array<{
    name: string;
    data: any;
    parent: object;
}>;
export declare function unset(data: object, path: string | Path): void;
export declare function uniqueId(prefix?: string): string;
export declare function result(param: any): any;
export declare function getPaths(param: object): Array<Path>;
export declare function clone<T>(data: T): T;
export declare function cloneDeep<T>(data: T): T;
export declare function merge<T>(origin: Partial<T>, ...args: Array<Partial<T>>): Partial<T>;
export declare function defaults<T extends object>(target: Partial<T>, ...args: Array<Partial<T>>): Partial<T>;
export interface ISplitRangeOptions {
    nbsp?: boolean;
    separator?: string;
}
export interface ISomeCallback<T> {
    (data?: T, key?: string): boolean;
}
export interface IHash<T> {
    [key: string]: T;
}
export declare type TTypes = 'string' | 'number' | 'object' | 'function' | 'array' | 'null' | 'undefined' | 'boolean';
