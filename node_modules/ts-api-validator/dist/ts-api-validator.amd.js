var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("node_modules/ts-utils/src/Iterator", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Iterator = (function () {
        function Iterator(some) {
            this._step = 0;
            this._list = some;
        }
        Iterator.prototype.next = function () {
            if (this._step < this._list.length) {
                var result = {
                    done: false,
                    value: this._list[this._step]
                };
                this._step++;
                return result;
            }
            else {
                return {
                    done: true
                };
            }
        };
        return Iterator;
    }());
    exports.Iterator = Iterator;
});
define("node_modules/ts-utils/src/Path", ["require", "exports", "node_modules/ts-utils/src/Iterator"], function (require, exports, Iterator_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Path = (function () {
        function Path(path) {
            this._path = path;
            this.length = this._path.length;
        }
        Path.prototype.reverse = function () {
            return new Path(this._path.slice().reverse());
        };
        Path.prototype.iterator = function () {
            var _this = this;
            return new Iterator_1.Iterator(this._path.map(function (item, index) { return _this.getItemData(index); }));
        };
        Path.prototype.forEach = function (cb, context) {
            var _this = this;
            return this._path.forEach(function (item, index) {
                cb.call(context, _this.getItemData(index), index);
            });
        };
        Path.prototype.some = function (cb, context) {
            var _this = this;
            return this._path.some(function (item, index) {
                return cb.call(context, _this.getItemData(index), index);
            });
        };
        Path.prototype.toString = function () {
            return this._path.map(function (item, i) {
                switch (item.type) {
                    case 0 /* Object */:
                        return i === 0 ? item.name : "." + item.name;
                    case 1 /* Array */:
                        return "[" + item.name + "]";
                }
            }).join('');
        };
        Path.prototype.getItemData = function (index) {
            var container = Path.getContainer(this._path[index].type);
            var nextContainer = this._path[index + 1] && Path.getContainer(this._path[index + 1].type) || null;
            return { name: this._path[index].name, container: container, nextContainer: nextContainer };
        };
        Path.parse = function (path) {
            var parts = [];
            path.split('.').forEach(function (key) {
                if (key === '') {
                    parts.push({
                        type: 0 /* Object */,
                        key: key
                    });
                }
                else {
                    var _a = key.replace(/\[(.*)?\]/, '|$1').split('|'), name = _a[0], index = _a[1];
                    if (name) {
                        var num = Number(name);
                        if (String(num) === name) {
                            parts.push({
                                type: 1 /* Array */,
                                name: name
                            });
                        }
                        else {
                            parts.push({
                                type: 0 /* Object */,
                                name: name
                            });
                        }
                    }
                    if (index) {
                        parts.push({
                            type: 1 /* Array */,
                            name: index
                        });
                    }
                }
            });
            return new Path(parts);
        };
        Path.getContainer = function (type) {
            switch (type) {
                case 0 /* Object */:
                    return Object.create(null);
                case 1 /* Array */:
                    return [];
            }
        };
        return Path;
    }());
    exports.Path = Path;
});
define("node_modules/ts-utils/src/filters", ["require", "exports", "node_modules/ts-utils/src/utils"], function (require, exports, utils_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var EMPTY_FUNCS_MAP = {
        skipNumber: utils_1.isNumber,
        skipString: utils_1.isString,
        skipNotEmpty: utils_1.isNotEmpty,
        skipNull: utils_1.isNull,
        skipUndefined: utils_1.isUndefined
    };
    function not(processor) {
        if (processor) {
            return function (data) { return !processor(data); };
        }
        else {
            return function (data) { return !data; };
        }
    }
    exports.not = not;
    function empty(options) {
        if (!options) {
            return Boolean;
        }
        var functions = [];
        utils_1.each(options, function (value, optionName) {
            if (EMPTY_FUNCS_MAP[optionName] && value) {
                functions.push(EMPTY_FUNCS_MAP[optionName]);
            }
        });
        if (!functions.length) {
            return Boolean;
        }
        else {
            return function (data) {
                return functions.some(function (f) { return f(data); }) || !!data;
            };
        }
    }
    exports.empty = empty;
    function contains(data) {
        if (typeof data === 'object') {
            var keys_1 = Object.keys(data);
            return function (localData) {
                if (!utils_1.isObject(localData)) {
                    return false;
                }
                return keys_1.every(function (key) { return data[key] === localData[key]; });
            };
        }
        else {
            return function (localData) {
                return data === localData;
            };
        }
    }
    exports.contains = contains;
    function containsDeep(data) {
        var paths = utils_1.getPaths(data);
        var check = function (localData) {
            return paths.every(function (parts) {
                return utils_1.get(data, parts) === utils_1.get(localData, parts);
            });
        };
        return function (localData) {
            if (typeof localData === 'object') {
                return check(localData);
            }
            else {
                return false;
            }
        };
    }
    exports.containsDeep = containsDeep;
    function notContains(data) {
        return not(contains(data));
    }
    exports.notContains = notContains;
    function notContainsDeep(data) {
        return not(containsDeep(data));
    }
    exports.notContainsDeep = notContainsDeep;
    function roundFilter(len) {
        return function (num) { return utils_1.round(num, len); };
    }
    exports.roundFilter = roundFilter;
    function splitRangeFilter(data, processor) {
        return function (num) { return utils_1.splitRange(num, data, processor); };
    }
    exports.splitRangeFilter = splitRangeFilter;
    function roundSplit(len, data) {
        return splitRangeFilter(data, roundFilter(len));
    }
    exports.roundSplit = roundSplit;
    function equal(some, noStrict) {
        if (noStrict) {
            return function (data) {
                /* tslint:disable */
                return some == data;
                /* tslint:enable */
            };
        }
        return function (data) {
            return some === data;
        };
    }
    exports.equal = equal;
    function notEqual(some, noStrict) {
        return not(equal(some, noStrict));
    }
    exports.notEqual = notEqual;
    var dateParsers = [
        {
            pattern: 'YYYY',
            handler: function (localDate) { return String(localDate.getFullYear()); }
        },
        {
            pattern: 'YY',
            handler: function (localDate) { return String(localDate.getFullYear()).substr(2); }
        },
        {
            pattern: 'MM',
            handler: function (localDate) { return String(utils_1.numToLength(localDate.getMonth() + 1, 2)); }
        },
        {
            pattern: 'M',
            handler: function (localDate) { return String(localDate.getMonth() + 1); }
        },
        {
            pattern: 'DD',
            handler: function (localDate) { return String(utils_1.numToLength(localDate.getDate(), 2)); }
        },
        {
            pattern: 'D',
            handler: function (localDate) { return String(localDate.getDate()); }
        },
        {
            pattern: 'hh',
            handler: function (localDate) { return String(utils_1.numToLength(localDate.getHours(), 2)); }
        },
        {
            pattern: 'h',
            handler: function (localDate) { return String(localDate.getHours()); }
        },
        {
            pattern: 'mm',
            handler: function (localDate) { return String(utils_1.numToLength(localDate.getMinutes(), 2)); }
        },
        {
            pattern: 'm',
            handler: function (localDate) { return String(localDate.getMinutes()); }
        },
        {
            pattern: 'ss',
            handler: function (localDate) { return String(utils_1.numToLength(localDate.getSeconds(), 2)); }
        },
        {
            pattern: 's',
            handler: function (localDate) { return String(localDate.getSeconds()); }
        }
    ];
    function date(pattern, processor) {
        var localPatterns = [];
        var forFind = pattern;
        var parse;
        dateParsers.forEach(function (datePattern) {
            if (forFind.indexOf(datePattern.pattern) !== -1) {
                forFind = forFind.replace(datePattern.pattern, '');
                localPatterns.push(datePattern);
            }
        });
        if (processor) {
            parse = function (toParse) {
                var result = processor(toParse);
                return utils_1.isNumber(result) ? new Date(result) : result;
            };
        }
        else {
            parse = function (data) {
                return utils_1.isNumber(data) ? new Date(data) : data;
            };
        }
        return function (localDate) {
            var _date = parse(localDate);
            return localPatterns.reduce(function (result, datePattern) {
                return result.replace(datePattern.pattern, datePattern.handler(_date));
            }, pattern);
        };
    }
    exports.date = date;
});
define("node_modules/ts-utils/src/utils", ["require", "exports", "node_modules/ts-utils/src/Path"], function (require, exports, Path_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @private
     * @type {{string: string; number: string; object: string; array: string}}
     */
    var TYPES = {
        string: '[object String]',
        number: '[object Number]',
        boolean: '[object Boolean]',
        object: '[object Object]',
        array: '[object Array]'
    };
    /**
     * @private
     * @type {() => string}
     */
    var toString = Object.prototype.toString;
    exports.DEFAULT_NUMBER_SEPARATOR = '.';
    /**
     * Check the parameter type
     * Is the parameter an object
     * @param param
     * @returns {boolean}
     */
    function isObject(param) {
        return toString.call(param) === TYPES.object;
    }
    exports.isObject = isObject;
    /**
     * Check the parameter
     * Whether the parameter is null or undefined
     * @param param
     * @returns {boolean}
     */
    function isEmpty(param) {
        return param == null;
    }
    exports.isEmpty = isEmpty;
    /**
     * Check the parameter
     * Whether the parameter is not null or is not undefined
     * @param param
     * @returns {boolean}
     */
    function isNotEmpty(param) {
        return param != null;
    }
    exports.isNotEmpty = isNotEmpty;
    /**
     * Check the parameter type
     * Is the parameter an string
     * @param param
     * @returns {boolean}
     */
    function isString(param) {
        return toString.call(param) === TYPES.string;
    }
    exports.isString = isString;
    /**
     * Check the parameter type
     * Is the parameter an number
     * @param param
     * @returns {boolean}
     */
    function isNumber(param) {
        return toString.call(param) === TYPES.number;
    }
    exports.isNumber = isNumber;
    /**
     * Check the parameter type
     * Is the parameter an array
     * @param param
     * @returns {boolean}
     */
    function isArray(param) {
        return toString.call(param) === TYPES.array;
    }
    exports.isArray = isArray;
    /**
     * Check the parameter type
     * Is the parameter an boolean
     * @param param
     * @returns {boolean}
     */
    function isBoolean(param) {
        return toString.call(param) === TYPES.boolean;
    }
    exports.isBoolean = isBoolean;
    /**
     * Check the parameter type
     * Is the parameter an null
     * @param param
     * @returns {boolean}
     */
    function isNull(param) {
        return param === null;
    }
    exports.isNull = isNull;
    /**
     * Check the parameter type
     * Is the parameter an undefined
     * @param param
     * @returns {boolean}
     */
    function isUndefined(param) {
        return param === undefined;
    }
    exports.isUndefined = isUndefined;
    /**
     * Check the parameter type
     * Is the parameter an NaN
     * @param param
     * @returns {boolean}
     */
    function isNaNCheck(param) {
        return isNumber(param) && isNaN(param);
    }
    exports.isNaNCheck = isNaNCheck;
    /**
     * Check the parameter type
     * Is the parameter an function
     * @param param
     * @returns {boolean}
     */
    function isFunction(param) {
        return typeof param === 'function';
    }
    exports.isFunction = isFunction;
    /**
     *
     * @param param
     * @returns {TTypes}
     */
    function typeOf(param) {
        var type = typeof param;
        switch (type) {
            case 'object':
                if (param === null) {
                    return 'null';
                }
                else {
                    var checkList = [
                        { check: isArray, type: 'array' },
                        { check: isObject, type: 'object' },
                        { check: isString, type: 'string' },
                        { check: isNumber, type: 'number' },
                        { check: isBoolean, type: 'boolean' }
                    ];
                    var $type_1 = 'null';
                    checkList.some(function (item) {
                        if (item.check(param)) {
                            $type_1 = item.type;
                        }
                        return $type_1 !== 'null';
                    });
                    return $type_1;
                }
            default:
                return type;
        }
    }
    exports.typeOf = typeOf;
    /**
     * Give the number to a certain number of symbols
     *
     * @example
     * numToLength(22, 3) // returns '022'
     * @example
     * numToLength(new Date().getHours(), 2) //returns '06'
     *
     * @param {number} num
     * @param {number} length
     * @returns {string}
     */
    function numToLength(num, length) {
        var str = String(num);
        for (var i = str.length; i < length; i++) {
            str = '0' + str;
        }
        return str;
    }
    exports.numToLength = numToLength;
    /**
     * Safely rounds a number to a character
     * @param {number} num
     * @param {number} len
     * @returns {number}
     */
    function round(num, len) {
        len = len || 2;
        return Number(Math.round(Number(num + 'e' + len)) + 'e-' + len);
    }
    exports.round = round;
    /**
     * Format a number
     *
     * @example
     * splitRange(21257.32, {separator: ','}) // returns '21 257,32'
     *
     * @example
     * splitRange(21257.322, {separator: ','}, (num) => round(num, 2)) // returns '21 257,32'
     *
     * @param {number} num
     * @param {ISplitRangeOptions} options format options
     * @param {IFilter<number, number>} processor function for preprocess param
     * @returns {string}
     */
    function splitRange(num, options, processor) {
        if (processor) {
            num = processor(num);
        }
        var str = String(num);
        var numData = str.split('.');
        var integral = numData[0], fractional = numData[1];
        integral = integral.split('').reverse().join('');
        integral = integral.replace(/(\d{3})/g, '$1 ')
            .split('').reverse().join('').replace(/\s/g, options && options.nbsp ? '&nbsp;' : ' ').trim();
        if (fractional) {
            return integral + (options && options.separator || exports.DEFAULT_NUMBER_SEPARATOR) + fractional;
        }
        return integral;
    }
    exports.splitRange = splitRange;
    /**
     * A generic iterator function, which can be used to seamlessly iterate over objects.
     * Like forEach for array
     * @param {Array<T> | IHash<T>} param
     * @param {(data: T, key: (string | number))} callback
     * @param context
     */
    function each(param, callback, context) {
        if (typeof param !== 'object' || !param) {
            return null;
        }
        if (context) {
            return Array.isArray(param) ? param.forEach(callback, context) :
                Object.keys(param).forEach(function (key) { return callback.call(context, param[key], key); });
        }
        else {
            return Array.isArray(param) ? param.forEach(callback) :
                Object.keys(param).forEach(function (key) { return callback(param[key], key); });
        }
    }
    exports.each = each;
    /**
     * The general iterator function that can be used to test a particular property.
     * Like some for array
     * @param {Object} param
     * @param {ISomeCallback<T>} callback
     * @returns {boolean}
     */
    function some(param, callback) {
        return Object.keys(param).some(function (key) { return callback(param[key], key); });
    }
    exports.some = some;
    /**
     * Get some data from object by string path
     *
     * @example
     * get({a: {b: 1}}), 'a.b') // returns 1
     *
     * @param {Object} data
     * @param {string} path
     * @returns {T}
     */
    function get(data, path) {
        var tmp = data;
        var parts = isString(path) ? Path_1.Path.parse(path) : path;
        parts.some(function (item) {
            if (typeof tmp === 'object' && tmp !== null && (item.name in tmp)) {
                tmp = tmp[item.name];
            }
            else {
                tmp = null;
                return true;
            }
        });
        return tmp;
    }
    exports.get = get;
    /**
     * Set some data to object by string path
     *
     * @example
     * var some = {};
     * set(some), 'a.b', 1) // some equal {a: {b: 1}}
     *
     * @param {Object} data
     * @param {string} path
     * @param value
     */
    function set(data, path, value) {
        var tmp = data;
        var parts = isString(path) ? Path_1.Path.parse(path) : path;
        parts.forEach(function (itemData, index) {
            var isLast = index === parts.length - 1;
            if (isLast) {
                tmp[itemData.name] = value;
            }
            else {
                if (typeof tmp[itemData.name] !== 'object') {
                    tmp[itemData.name] = itemData.nextContainer;
                }
                tmp = tmp[itemData.name];
            }
        });
    }
    exports.set = set;
    function result(param) {
        if (isFunction(param)) {
            return param();
        }
        else {
            return param;
        }
    }
    exports.result = result;
    /**
     * Get array all path from object
     *
     * @example
     * getPaths({a: {b: 1, c: 2}, d: 1}) // return [['a', 'b'], ['a', 'c'], ['d']]
     *
     * @param {Object} param
     * @returns {Array<Array<string>>}
     */
    function getPaths(param) {
        var paths = [];
        function getIterate(parents, array) {
            var iterate = function (value, key) {
                var newLine = parents.slice();
                newLine.push({ type: array ? 1 /* Array */ : 0 /* Object */, name: key });
                if (isObject(value)) {
                    each(value, getIterate(newLine));
                }
                else if (isArray(value)) {
                    each(value, getIterate(newLine, true));
                }
                else {
                    paths.push(newLine);
                }
            };
            return iterate;
        }
        var firstLine = [];
        each(param, getIterate(firstLine, isArray(param)));
        return paths.map(function (pathParts) { return new Path_1.Path(pathParts); });
    }
    exports.getPaths = getPaths;
    function clone(data) {
        switch (typeof data) {
            case 'object':
                if (data === null) {
                    return null;
                }
                if (Array.isArray(data)) {
                    return data.slice();
                }
                else {
                    return __assign({}, data);
                }
            default:
                return data;
        }
    }
    exports.clone = clone;
    function cloneDeep(data) {
        switch (typeof data) {
            case 'object':
                var paths = getPaths(data);
                var $clone_1 = isArray(data) ? [] : Object.create(null);
                paths.forEach(function (path) {
                    var value = get(data, path);
                    set($clone_1, path, value);
                });
                return $clone_1;
            default:
                return data;
        }
    }
    exports.cloneDeep = cloneDeep;
    function merge(origin) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        args.forEach(function (part) {
            var paths = getPaths(part);
            paths.forEach(function (path) {
                var value = get(part, path);
                set(origin, path, value);
            });
        });
        return origin;
    }
    exports.merge = merge;
    function defaults(target) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var paths = getPaths(target).map(String);
        args.reverse().forEach(function (item) {
            var itemPaths = getPaths(item);
            itemPaths.forEach(function (path) {
                var stringPath = path.toString();
                if (paths.indexOf(stringPath) === -1) {
                    paths.push(stringPath);
                    set(target, path, get(item, path));
                }
            });
        });
        return target;
    }
    exports.defaults = defaults;
});
define("node_modules/ts-utils/src/Signal", ["require", "exports", "node_modules/ts-utils/src/filters"], function (require, exports, filters_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Signal = (function () {
        function Signal() {
            this._handlers = [];
        }
        Signal.prototype.on = function (handler) {
            this._handlers.push({
                isOnce: false,
                handler: handler
            });
        };
        Signal.prototype.once = function (handler) {
            this._handlers.push({
                isOnce: true,
                handler: handler
            });
        };
        Signal.prototype.off = function (handler) {
            if (handler) {
                this._handlers = this._handlers.filter(filters_1.notContains({ handler: handler }));
            }
            else {
                this._handlers = [];
            }
        };
        Signal.prototype.dispatch = function (some) {
            var _this = this;
            this._handlers.slice().forEach(function (handlerData) {
                if (handlerData.isOnce) {
                    _this.off(handlerData.handler);
                }
                handlerData.handler(some);
            });
        };
        return Signal;
    }());
    exports.Signal = Signal;
});
define("node_modules/ts-utils/src/utilsWithFilters", ["require", "exports", "node_modules/ts-utils/src/utils", "node_modules/ts-utils/src/filters"], function (require, exports, utils_2, filters_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function find(some, target) {
        var filter = utils_2.isFunction(target) ? target : filters_2.contains(target);
        var result = null;
        if (utils_2.isArray(some)) {
            some.some(function (data) {
                if (filter(data)) {
                    result = data;
                    return true;
                }
            });
        }
        else {
            Object.keys(some).some(function (key) {
                if (filter(some[key])) {
                    result = some[key];
                    return true;
                }
            });
        }
        return result;
    }
    exports.find = find;
});
define("node_modules/ts-utils/index", ["require", "exports", "node_modules/ts-utils/src/utils", "node_modules/ts-utils/src/filters", "node_modules/ts-utils/src/Signal", "node_modules/ts-utils/src/utilsWithFilters", "node_modules/ts-utils/src/Path", "node_modules/ts-utils/src/Iterator"], function (require, exports, utils_3, filters_3, Signal_1, utilsWithFilters_1, Path_2, Iterator_2) {
    "use strict";
    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(utils_3);
    __export(filters_3);
    __export(Signal_1);
    __export(utilsWithFilters_1);
    __export(Path_2);
    __export(Iterator_2);
});
define("src/BasePart", ["require", "exports", "node_modules/ts-utils/index"], function (require, exports, ts_utils_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var BasePart = (function () {
        function BasePart(options, path) {
            this.options = options;
            this.path = path;
            if (this.options.isEmpty) {
                this.isEmpty = this.options.isEmpty;
            }
            if (this.options.isValid) {
                this.isValid = this.options.isValid;
            }
            if (this.options.required && ('defaultValue' in this.options)) {
                throw new Error('Wrong params! Conflict options "required" and defaultValue');
            }
        }
        BasePart.prototype.process = function (data, roots) {
            var _this = this;
            var path = this.getPath();
            var result = this.getValue(this.getDataByPath(data, path), roots);
            return BasePart.toPromise(result).then(function (value) {
                var isEmpty = _this.isEmpty(value);
                var isValid = _this.isValid(value);
                var type = _this.options.type.name || _this.options.type.prototype.constructor.name;
                if (_this.options.required) {
                    if (isEmpty) {
                        throw new Error("Required field type \"" + type + "\" \"" + path + "\" is empty!");
                    }
                }
                if (('defaultValue' in _this.options) && isEmpty) {
                    value = _this.options.defaultValue;
                }
                else {
                    if (!isValid) {
                        throw new Error("Field \"" + path + "\" is invalid!");
                    }
                }
                return value;
            });
        };
        BasePart.prototype.getPath = function () {
            return this.options.path === null ? null : this.options.path || this.path;
        };
        BasePart.prototype.isEmpty = function (data) {
            return data == null;
        };
        BasePart.prototype.isValid = function (data) {
            return true;
        };
        BasePart.prototype.getDataByPath = function (data, path) {
            if (this.options.parseValue) {
                if (path) {
                    return this.options.parseValue(ts_utils_1.get(data, path));
                }
                else {
                    return this.options.parseValue(data);
                }
            }
            else if (path != null) {
                return ts_utils_1.get(data, path);
            }
            else {
                return data;
            }
        };
        BasePart.isPromise = function (some) {
            return some && some.then && typeof some.then === 'function';
        };
        BasePart.toPromise = function (some) {
            return BasePart.isPromise(some) ? some : Promise.resolve(some);
        };
        return BasePart;
    }());
    exports.BasePart = BasePart;
});
define("src/config", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OUT_DATE_PATTERN = 'DD.MM.YYYY';
});
define("src/StringDatePart", ["require", "exports", "src/BasePart", "src/config", "node_modules/ts-utils/index"], function (require, exports, BasePart_1, config_1, ts_utils_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var StringDatePart = (function (_super) {
        __extends(StringDatePart, _super);
        function StringDatePart(config, path) {
            var _this = _super.call(this, config, path) || this;
            _this.dateProcessor = ts_utils_2.date(_this.options.outPattern || config_1.OUT_DATE_PATTERN);
            return _this;
        }
        StringDatePart.prototype.getValue = function (data) {
            var date;
            if (data instanceof Date) {
                date = data;
            }
            if (typeof data === 'number') {
                date = new Date(data);
            }
            if (date) {
                return this.dateProcessor(date);
            }
            return null;
        };
        return StringDatePart;
    }(BasePart_1.BasePart));
    exports.StringDatePart = StringDatePart;
});
define("src/ObjectPart", ["require", "exports", "src/BasePart", "node_modules/ts-utils/index"], function (require, exports, BasePart_2, ts_utils_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ObjectPart = (function (_super) {
        __extends(ObjectPart, _super);
        function ObjectPart(config, path) {
            var _this = _super.call(this, config, path) || this;
            var myPath = _this.getPath();
            _this._childHash = Object.create(null);
            ts_utils_3.each(_this.options.content, function (config, key) {
                var Component = config.type;
                var localPath = path == null ? String(key) : myPath + "." + key;
                _this._childHash[key] = new Component(config, localPath);
            });
            return _this;
        }
        ObjectPart.prototype.process = function (data, rootList) {
            var _this = this;
            return _super.prototype.process.call(this, data, rootList).then(function (value) {
                if (value && ts_utils_3.isObject(value)) {
                    var promises_1 = [];
                    var result_1 = Object.create(null);
                    Object.keys(_this._childHash).forEach(function (name) {
                        var promise = _this._childHash[name].process(data, rootList).then(function (itemValue) {
                            result_1[name] = itemValue;
                        });
                        promises_1.push(promise);
                    });
                    return Promise.all(promises_1).then(function () { return result_1; });
                }
                else {
                    return value;
                }
            });
        };
        ObjectPart.prototype.getValue = function (data) {
            if (ts_utils_3.isObject(data)) {
                return data;
            }
            else {
                return null;
            }
        };
        return ObjectPart;
    }(BasePart_2.BasePart));
    exports.ObjectPart = ObjectPart;
});
define("src/ArrayPart", ["require", "exports", "src/BasePart", "node_modules/ts-utils/index"], function (require, exports, BasePart_3, ts_utils_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ArrayPart = (function (_super) {
        __extends(ArrayPart, _super);
        function ArrayPart(config, path) {
            var _this = _super.call(this, config, path) || this;
            var Component = _this.options.content.type;
            _this._child = new Component(_this.options.content);
            return _this;
        }
        ArrayPart.prototype.process = function (data, rootList) {
            var _this = this;
            return _super.prototype.process.call(this, data, rootList).then(function (value) {
                if (value && ts_utils_4.isArray(value)) {
                    return Promise.all(value.map(function (item) { return _this._child.process(item, rootList.concat(data)); }));
                }
                else {
                    return value;
                }
            });
        };
        ArrayPart.prototype.getValue = function (data) {
            if (ts_utils_4.isArray(data)) {
                return data;
            }
            else {
                return null;
            }
        };
        return ArrayPart;
    }(BasePart_3.BasePart));
    exports.ArrayPart = ArrayPart;
});
define("src/Schema", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Schema = (function () {
        function Schema(config) {
            var Component = config.type;
            this._children = new Component(config);
        }
        Schema.prototype.parse = function (data) {
            return this._children.process(data, []);
        };
        return Schema;
    }());
    exports.Schema = Schema;
});
define("src/BooleanPart", ["require", "exports", "src/BasePart"], function (require, exports, BasePart_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var BooleanPart = (function (_super) {
        __extends(BooleanPart, _super);
        function BooleanPart() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        BooleanPart.prototype.getValue = function (data) {
            switch (typeof data) {
                case 'boolean':
                    return data;
                case 'string':
                case 'number':
                    return Boolean(data);
                default:
                    return null;
            }
        };
        return BooleanPart;
    }(BasePart_4.BasePart));
    exports.BooleanPart = BooleanPart;
});
define("src/StringPart", ["require", "exports", "src/BasePart"], function (require, exports, BasePart_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var StringPart = (function (_super) {
        __extends(StringPart, _super);
        function StringPart() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        StringPart.prototype.getValue = function (data) {
            switch (typeof data) {
                case 'string':
                    return data;
                case 'number':
                    return String(data);
                default:
                    return null;
            }
        };
        return StringPart;
    }(BasePart_5.BasePart));
    exports.StringPart = StringPart;
});
define("src/DatePart", ["require", "exports", "src/BasePart"], function (require, exports, BasePart_6) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var DatePart = (function (_super) {
        __extends(DatePart, _super);
        function DatePart() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DatePart.prototype.getValue = function (data) {
            if (data instanceof Date) {
                return data;
            }
            if (typeof data === 'number') {
                return new Date(data);
            }
            return null;
        };
        return DatePart;
    }(BasePart_6.BasePart));
    exports.DatePart = DatePart;
});
define("src/NumberPart", ["require", "exports", "src/BasePart"], function (require, exports, BasePart_7) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var NumberPart = (function (_super) {
        __extends(NumberPart, _super);
        function NumberPart() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        NumberPart.prototype.getValue = function (data) {
            switch (typeof data) {
                case 'number':
                    return data;
                case 'string':
                    return Number(data);
                default:
                    return null;
            }
        };
        NumberPart.prototype.isEmpty = function (data) {
            return data == null || isNaN(data);
        };
        return NumberPart;
    }(BasePart_7.BasePart));
    exports.NumberPart = NumberPart;
});
define("index", ["require", "exports", "src/Schema", "src/config", "src/BooleanPart", "src/StringPart", "src/DatePart", "src/StringDatePart", "src/NumberPart", "src/ObjectPart", "src/ArrayPart", "src/BasePart"], function (require, exports, Schema_1, config_2, BooleanPart_1, StringPart_1, DatePart_1, StringDatePart_1, NumberPart_1, ObjectPart_1, ArrayPart_1, BasePart_8) {
    "use strict";
    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(Schema_1);
    __export(config_2);
    __export(BooleanPart_1);
    __export(StringPart_1);
    __export(DatePart_1);
    __export(StringDatePart_1);
    __export(NumberPart_1);
    __export(ObjectPart_1);
    __export(ArrayPart_1);
    __export(BasePart_8);
});
